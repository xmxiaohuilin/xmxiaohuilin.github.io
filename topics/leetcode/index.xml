<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leetcode on Cindy&#39;s Blog</title>
    <link>http://xmxiaohuilin.github.io/topics/leetcode/</link>
    <description>Recent content in Leetcode on Cindy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015 Cindy Lin.</copyright>
    <lastBuildDate>Fri, 20 Nov 2015 22:43:13 -0700</lastBuildDate>
    <atom:link href="http://xmxiaohuilin.github.io/topics/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Few questions from Old Version</title>
      <link>http://xmxiaohuilin.github.io/2015/11/20/few-questions-from-old-version/</link>
      <pubDate>Fri, 20 Nov 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/20/few-questions-from-old-version/</guid>
      <description>

&lt;h2 id=&#34;probelam-i-grey-code&#34;&gt;Probelam I: Grey Code&lt;/h2&gt;

&lt;p&gt;Given 2 numbers. Find if they are consecutive gray (grey) code sequences. In grey code sequence, two succesive values differ in only one bit.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public int greyCode(byte term1, byte term2) {
		// use XOR to find the difference between two numbers
		byte x = (byte)(term1 ^ term2);
		// check how many 1s left in XOR result.
		int total = 0;
		while(x != 0){
			total += (x&amp;amp;1);
			x &amp;gt;&amp;gt;= 1;
		}

		if(total == 1) 
			return 1; 
		else 
			return 0;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;probelam-ii-remove-vowels&#34;&gt;Probelam II: Remove Vowels&lt;/h2&gt;

&lt;h2 id=&#34;solution-1&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public String removeVowel(String str) {
		if(str == null || str.length == 0)
			return str;
		StringBuffer sb = new StringBuffer();
		String dict = &amp;quot;aeiouAEIOU&amp;quot;;
		for(int i = 0; i &amp;lt; str.length(); i++){
			if(dict.indexOf(str.charAt(i)) &amp;gt; -1)
		 		continue;
			sb.append(str.charAt(i));
		}
		return sb.toStirng();
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;problem-iii&#34;&gt;Problem III:&lt;/h2&gt;

&lt;p&gt;String rotation (if string is the rotate of the other)&lt;/p&gt;

&lt;h2 id=&#34;solution-2&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public boolean isRotation(String s1,String s2) {  
	    if(s1 == null || s2 == null)
      		return false;
    	if(s1.length() != s2.length())
      		return false;
    	return (s1 + s1).indexOf(s2) != -1;
	}
} 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Game of Life</title>
      <link>http://xmxiaohuilin.github.io/2015/11/19/game-of-life/</link>
      <pubDate>Thu, 19 Nov 2015 12:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/19/game-of-life/</guid>
      <description>

&lt;p&gt;Given an array which represents a group of cells, their states are changing everyday according to some rule.&lt;/p&gt;

&lt;h2 id=&#34;problem-i&#34;&gt;Problem I&lt;/h2&gt;

&lt;p&gt;The following rules is for rule one:
- if the cell has the same numbers on its two sides, set it as &lt;code&gt;0&lt;/code&gt;;
- if the cell has the different numbers on its two sides, set it as &lt;code&gt;0&lt;/code&gt;;&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;cell: (0)[1, 0, 0, 0, 0, 1, 0, 0](0)
days1: [0, 1, 0, 0, 1, 0, 1, 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public static int[] daysChange (int[] cells, int day) {
		if (cells == null || cells.length &amp;lt;= 2) {
			return cells;
		}
		for(int i = 0; i &amp;lt; day; i++)
			changeHelper(cells);
		return cells;
	}

	/**
	* Modify on original array by the othse changing rules
	* @param cells array
	**/
	private static void changeHelper (int[] cells) {
		int prev = 0;
		for ( int i = 0 ; i &amp;lt; cells.length ; i++ ) {
			int tmp = cells[i];
			if(i == cells.length - 1) {
				cells[i] = prev ^ 0;
			} else {
				cells[i] = prev ^ cells[i+1];
			}
			prev = tmp;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;problem-ii&#34;&gt;Problem II&lt;/h2&gt;

&lt;p&gt;According to the Wikipedia&amp;rsquo;s article:
&amp;gt; The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.&lt;/p&gt;

&lt;p&gt;Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Any live cell with fewer than two live neighbors dies, as if caused by under-population.&lt;/li&gt;
&lt;li&gt;Any live cell with two or three live neighbors lives on to the next generation.&lt;/li&gt;
&lt;li&gt;Any live cell with more than three live neighbors dies, as if by over-population..&lt;/li&gt;
&lt;li&gt;Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Write a function to compute the next state (after one update) of the board given its current state.&lt;/p&gt;

&lt;h3 id=&#34;follow-up&#34;&gt;Follow-up&lt;/h3&gt;

&lt;p&gt;Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.
In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Find Minimum Value Sum of Path</title>
      <link>http://xmxiaohuilin.github.io/2015/11/19/find-minimum-value-sum-of-path/</link>
      <pubDate>Thu, 19 Nov 2015 10:23:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/19/find-minimum-value-sum-of-path/</guid>
      <description>

&lt;p&gt;Given a binary tree, find a path has the minimum sum of node value.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public static int minPath(TreeNode root) {
		if (root == null)
			return 0;
		if (root.left == null &amp;amp;&amp;amp; root.right == null)
			return root.val;
		if (root.left == null)
			return root.val + minPath(root.right);
		if (root.right == null)
			return root.val + minPath(root.left);
		return root.val + Math.min(minPath(root.left), minPath(root.right));
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determine valid parentheses</title>
      <link>http://xmxiaohuilin.github.io/2015/11/17/determine-valid-parentheses/</link>
      <pubDate>Tue, 17 Nov 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/17/determine-valid-parentheses/</guid>
      <description>

&lt;p&gt;Given a String, judge if it is a valid parenthese.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
public static boolean validParenthese(String str) {
    if(str == null || str.length() == 0)
      return true;
    // store the parenthese
    Stack&amp;lt;Character&amp;gt; stack = new Stack&amp;lt;&amp;gt;();
    // save the parenthese pair in hashmap as a dictionary
    HashMap&amp;lt;Character, Character&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
    map.put(&#39;(&#39;,&#39;)&#39;);map.put(&#39;{&#39;,&#39;}&#39;);map.put(&#39;[&#39;,&#39;]&#39;);
    
    for(int i = 0 ; i &amp;lt; str.length() ; i++) {
      char cur = str.charAt(i);
      if(map.containsKey(cur))
        // if the current character is a front parenthese, directly push into stack
        stack.push(cur);
      else if(map.containsValue(cur)){  
      	// if current character is a back parenthese  
          if(stack.isEmpty() || map.get(stack.pop()) != cur)
          // if current stack is empty or the poped element doesn&#39;t match with current character 
            return false;
      }
    }
    return stack.isEmpty();
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Is Subtree</title>
      <link>http://xmxiaohuilin.github.io/2015/11/17/is-subtree/</link>
      <pubDate>Tue, 17 Nov 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/17/is-subtree/</guid>
      <description>

&lt;p&gt;Given a tree root node and another root node of tree, check if another tree is the subtree of the given tree.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
    
    public boolean isSubtree(TreeNode root, TreeNode node) {
        if(node  == null)
            return true;
        if(root == null)
            return false;
        // check if currende node can build a same tree, or  recursively check the child node is that subtree
        return checkNodes(root, node) || isSubtree(root.left, node) ||isSubtree(root.right, node);
    }

    /** Check two trees are the same
    * @param: treenode - the root node of one partial tree
    * @param: treenode - the root node of another tree
    * @return: boolean - if two trees are the same 
    */
    private boolean checkNodes(TreeNode r1, TreeNode r2) {
        if(r1 == null &amp;amp;&amp;amp; r2  == null)
            return true;
        if(r1 == null || r2 == null)
            return false;
        return (r1.val == r2.val) &amp;amp;&amp;amp; checkNodes(r1.left, r2.left) &amp;amp;&amp;amp; chechNodes(r1.right, r2.right);
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Merge Two Linked List</title>
      <link>http://xmxiaohuilin.github.io/2015/11/17/merge-two-linked-list/</link>
      <pubDate>Tue, 17 Nov 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/17/merge-two-linked-list/</guid>
      <description>

&lt;p&gt;Given two sorted linked lists, merge two lists into one.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
    public ListNode merge(ListNode n1, ListNode n2) {
        if(n1 == null)
            return n2;
        if(n2 == null)
            return n1;

        // create dummy node for pointing on next node from list n1
        ListNode dummy = new ListNode(0);
        
        // create pre node as a pointer on current nodes from n1
        ListNode pre = dummy;
        pre.next = n1;

        // iterate passing two lists 
        while(n1!=null &amp;amp;&amp;amp; n2!=null) {
            // if n1 has value larger than n2, 
            // move it forward and set that n1 in the rear of inserted node
            if(n1.val &amp;gt; n2.val) {
                ListNode next = n2.next;
                n2.next = pre.next;
                pre.next = n2;
                n2 = next;
            }else {
                n1 = n1.next;
            }
            pre = pre.next;
        }

        // if n2 still has nodes, attach n2 directly into pre
        if(n2!=null)
            pre.next = n2;
        return dummy.next;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Isomorphic Pair</title>
      <link>http://xmxiaohuilin.github.io/2015/11/14/isomorphic-pair/</link>
      <pubDate>Sat, 14 Nov 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/14/isomorphic-pair/</guid>
      <description>

&lt;p&gt;Given two words as Strings, determine if they are isomorphic. Two words are called isomorphic if the letters in one word can be remapped to get the second word. Remapping a letter means replacing all occurrences of it with another letter while the ordering of the letters remains unchanged. No two letters may map to the same letter, but a letter may map to itself.&lt;/p&gt;

&lt;h2 id=&#34;think-1&#34;&gt;Think #1&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Two Hashmap for mapping A-B and B-A.&lt;/li&gt;
&lt;li&gt;make sure both mapping are correct if any character appear in its corresponding mapping.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution-1&#34;&gt;Solution #1&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;	public boolean isomorphicString(String str1, String str2) {
		if (str1 == null || str2 == null || str1.length() != str2.length())
			return false;
		HashMap&amp;lt;Character, Character&amp;gt; mapAB = new HashMap&amp;lt;&amp;gt;();
		HashMap&amp;lt;Character, Character&amp;gt; mapBA = new HashMap&amp;lt;&amp;gt;();
		for (int i = 0; i &amp;lt; str1.length(); i++) {
			char a = str1.charAt(i);
			char b = str2.charAt(i);
			if (!mapAB.containsKey(a) &amp;amp;&amp;amp; !mapBA.containsKey(b)) {
				mapAB.put(a, b);
				mapBA.put(b, a);
			} else {
				if (mapAB.containsKey(a) &amp;amp;&amp;amp; mapAB.get(a) != b)
					return false;
				if (mapBA.containsKey(b) &amp;amp;&amp;amp; mapBA.get(b) != a)
					return false;
			}
		}
		return true;
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think-2&#34;&gt;Think #2&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;One Hashmap&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution-2&#34;&gt;Solution #2&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;	public boolean isomorphicStringII(String str1, String str2) {
		if ((str1 == null &amp;amp;&amp;amp; str2 == null)
				|| (str1.length() == 0 &amp;amp;&amp;amp; str2.length() == 0)
				|| str1.equals(str2))
			return true;
		if (str1 == null || str2 == null || str1.length() != str2.length())
			return false;
		HashMap&amp;lt;Character, Character&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
		int i = 0;
		while (i &amp;lt; str1.length()) {
			char a = str1.charAt(i);
			char b = str2.charAt(i);
			if (map.containsKey(a)) {
				if (map.get(a) != b)
					return false;
			} else {
				if (map.containsValue(b))
					return false;
				map.put(a, b);
			}
			i++;
		}
		return true;
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think-3&#34;&gt;Think #3&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Integer Array with 512 length&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution-3&#34;&gt;Solution #3&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public boolean isIsomorphic(String s1, String s2) {
        int[] m = new int[512];
        for (int i = 0; i &amp;lt; s1.length(); i++) {
            if (m[s1.charAt(i)] != m[s2.charAt(i)+256]) 
                return false;
            m[s1.charAt(i)] = m[s2.charAt(i)+256] = i+1;
        }
        return true;	
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Maximum Subarray of Sum / Product</title>
      <link>http://xmxiaohuilin.github.io/2015/11/14/maximum-subarray-of-sum-/-product/</link>
      <pubDate>Sat, 14 Nov 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/14/maximum-subarray-of-sum-/-product/</guid>
      <description>

&lt;p&gt;Find the contiguous subarray within an array (containing at least one number) which has the largest sum.&lt;/p&gt;

&lt;p&gt;For example, given the array &lt;code&gt;[−2,1,−3,4,−1,2,1,−5,4]&lt;/code&gt;,
the contiguous subarray &lt;code&gt;[4,−1,2,1]&lt;/code&gt; has the largest sum = &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public int maxSubArray(int[] arr) {
        int maxSum = Integer.MIN_VALUE;
		int curSum = 0;
		for (int i = 0; i &amp;lt; arr.length; i++) {
			curSum += arr[i];
			maxSum = Math.max(maxSum, curSum);
			if (curSum &amp;lt; 0)
				curSum = 0;
		}
		return maxSum;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-record-index&#34;&gt;Solution #Record Index&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public int[] maxSubArray(int[] arr) {
        int maxSum = Integer.MIN_VALUE;
		int curSum = 0;
		int prev = 0, l = 0, r = 0;
		for (int i = 0; i &amp;lt; arr.length; i++) {
			curSum += arr[i];
			if(curSum &amp;gt; maxSum) {
				maxSum = curSum;
				l = prev;
				r = i;
			}
			if (curSum &amp;lt; 0) {
				curSum = 0;
				prev = i + 1;
			}
		}
		return new int[]{l, r};
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find the contiguous subarray within an array (containing at least one number) which has the largest product.&lt;/p&gt;

&lt;p&gt;For example, given the array &lt;code&gt;[2,3,-2,4]&lt;/code&gt;,
the contiguous subarray &lt;code&gt;[2,3]&lt;/code&gt; has the largest product = &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;solution-1&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public int maxProduct(int[] nums) {
        int glMax = Integer.MIN_VALUE;
        
        int localMin = 1; // record the current max
        int localMax = 1; // record the current min, since the negative number multiply with current number may leads to next product as the positive max
        for(int i = 0; i &amp;lt; nums.length; i++) {
            int tmp = localMax;
            localMax = Math.max(localMax*nums[i], Math.max(localMin*nums[i], nums[i]));
            localMin = Math.min(tmp*nums[i], Math.min(localMin*nums[i], nums[i]));
            glMax = Math.max(glMax, localMax);
        }
        
        return glMax;
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Minimum Window Substring</title>
      <link>http://xmxiaohuilin.github.io/2015/11/14/minimum-window-substring/</link>
      <pubDate>Sat, 14 Nov 2015 22:10:29 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/14/minimum-window-substring/</guid>
      <description>

&lt;p&gt;Given a string source and a string target, find the minimum window in source which will contain all the characters in target.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;source = &amp;ldquo;ADOBECODEBANC&amp;rdquo; target = &amp;ldquo;ABC&amp;rdquo; Minimum window is &amp;ldquo;BANC&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;note&#34;&gt;Note&lt;/h3&gt;

&lt;p&gt;If there is no such window in source that covers all characters in target, return the emtpy string &amp;ldquo;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in source.&lt;/p&gt;

&lt;h3 id=&#34;challenge&#34;&gt;Challenge&lt;/h3&gt;

&lt;p&gt;Can you do it in time complexity O(n) ?&lt;/p&gt;

&lt;h3 id=&#34;clarification&#34;&gt;Clarification&lt;/h3&gt;

&lt;p&gt;The characters in minimum window doesn&amp;rsquo;t need to has the same order in target.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public String minWindow(String s, String t) {
        // preload for target checking
        if(s == null || s.length() == 0 || t == null || t.length() == 0)
            return &amp;quot;&amp;quot;;
        
        
        // store t into a hashmap &amp;lt;char, freq&amp;gt;
        HashMap&amp;lt;Character, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
        for(char c : t.toCharArray())
            map.put(c, map.containsKey(c)?map.get(c) + 1 : 1);
        // set curidx-i, leftbound-prev, hitcharCnt-hitCnt, default max length-len
        int prev = 0, hitCnt = 0, len = s.length();
        String res = &amp;quot;&amp;quot;;
        
        for(int i = 0; i&amp;lt;s.length();i++){
            char cur = s.charAt(i);
            // skip nonhit char
            if(!map.containsKey(cur))
                continue;
            map.put(cur, map.get(cur) - 1);
            if(map.get(cur) &amp;gt;= 0)
                hitCnt++;
                
            while(hitCnt == t.length()) {
                if(i - prev + 1 &amp;lt;= len) {
                    res = s.substring(prev, i+1);
                    len = i - prev + 1;
                }
                if(map.containsKey(s.charAt(prev))) {
                   map.put(s.charAt(prev), map.get(s.charAt(prev))+1);
                   if(map.get(s.charAt(prev)) &amp;gt; 0)
                      hitCnt--;
                }
                prev++;
            }
        }
        return res;
    }

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Binary Tree Upside Down</title>
      <link>http://xmxiaohuilin.github.io/2015/11/14/binary-tree-upside-down/</link>
      <pubDate>Sat, 14 Nov 2015 15:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/14/binary-tree-upside-down/</guid>
      <description>

&lt;p&gt;Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty, flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Given a binary tree &lt;code&gt;{1,2,3,4,5}&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     1
    / \
   2   3
  / \
 4   5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;return the root of the binary tree &lt;code&gt;[4,5,2,#,#,3,1]&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     4
    / \
   5   2
      / \
     3   1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Mark the parent node &lt;code&gt;parent&lt;/code&gt; from next right node position.&lt;/li&gt;
&lt;li&gt;Mark the current right child &lt;code&gt;node.right&lt;/code&gt; from next left &lt;code&gt;left&lt;/code&gt; node position&lt;/li&gt;
&lt;li&gt;Mark the next iteration node &lt;code&gt;next&lt;/code&gt; by current left child &lt;code&gt;node.left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replace the current node&amp;rsquo;s left child as the recorded &lt;code&gt;right&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Replace the current node&amp;rsquo;s right child as the recorded &lt;code&gt;parent&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Replace current iteration node by &lt;code&gt;next&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution-iterative&#34;&gt;Solution #Iterative&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public TreeNode UpsideDownBinaryTree(TreeNode node) {  
        TreeNode parent = null, right = null;
		while(node != null) {
			TreeNode next = node.left;
			node.left = right;						
			right = node.right;
			node.right = parent;
			parent = node;
			node = next;
		}
		return parent;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-recursive&#34;&gt;Solution #Recursive&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public static TreeNode upsideDown(TreeNode node) {
        if(node == null)
            return node;
        TreeNode root = node, left = node.left, right = node.right;
        if(left != null) {
            TreeNode newroot = upsideDown(node.left);
            left.left = right;
            left.right = root;
            return newroot;
        }
        return node;
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Course Schedule I/II</title>
      <link>http://xmxiaohuilin.github.io/2015/11/14/course-schedule-i/ii/</link>
      <pubDate>Sat, 14 Nov 2015 13:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/14/course-schedule-i/ii/</guid>
      <description>

&lt;h2 id=&#34;problem-i&#34;&gt;Problem I&lt;/h2&gt;

&lt;p&gt;There are a total of n courses you have to take, labeled from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n - 1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: &lt;code&gt;[0,1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2, [[1,0]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2, [[1,0],[0,1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.&lt;/p&gt;

&lt;h3 id=&#34;solution-topological-sort&#34;&gt;Solution #Topological Sort&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        HashMap&amp;lt;Integer, Course&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
        for(int[] pair : prerequisites) {
            int pre = pair[1];
            int cur = pair[0];
            if(!map.containsKey(pre))
                map.put(pre, new Course(pre));
            if(!map.containsKey(cur))
                map.put(cur, new Course(cur));
            map.get(pre).nexts.add(map.get(cur));
            map.get(cur).preq++;
        }
        Queue&amp;lt;Course&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;();
        for(Course c : map.values()) {
            if(c.preq == 0)
                queue.offer(c);
        }
        
        while(!queue.isEmpty()) {
            Course cur = queue.poll();
            map.remove(cur.idx);
            for(Course next : cur.nexts) {
                next.preq--;
                if(next.preq == 0)
                    queue.offer(next);
            }
        }
        return map.size() == 0;
    }
}
class Course{
    int idx;
    int preq;
    ArrayList&amp;lt;Course&amp;gt; nexts;
    public Course(int index) {
        this.idx = index;
        this.preq = 0;
        this.nexts = new ArrayList&amp;lt;&amp;gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;problem-ii&#34;&gt;Problem II&lt;/h2&gt;

&lt;p&gt;Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.&lt;/p&gt;

&lt;p&gt;There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.&lt;/p&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;2, [[1,0]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a total of 2 courses to take. To take course &lt;code&gt;1&lt;/code&gt; you should have finished course &lt;code&gt;0&lt;/code&gt;. So the correct course order is &lt;code&gt;[0,1]&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;4, [[1,0],[2,0],[3,1],[3,2]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a total of 4 courses to take. To take course &lt;code&gt;3&lt;/code&gt; you should have finished both courses &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;. Both courses &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; should be taken after you finished course 0. So one correct course order is &lt;code&gt;[0,1,2,3]&lt;/code&gt;. Another correct ordering is &lt;code&gt;[0,2,1,3]&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;solution-topological-sort-1&#34;&gt;Solution #Topological Sort&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        if(prerequisites == null || prerequisites.length == 0)
            return new int[0];
            
        HashMap&amp;lt;Integer, Course&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
        for(int[] pair : prerequisites) {
            int pre = pair[1];
            int cur = pair[0];
            if(!map.containsKey(pre))
                map.put(pre, new Course(pre));
            if(!map.containsKey(cur))
                map.put(cur, new Course(cur));
            map.get(pre).nexts.add(map.get(cur));
            map.get(cur).preq++;
        }
        Queue&amp;lt;Course&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;();
        for(Course c : map.values()) {
            if(c.preq == 0)
                queue.offer(c);
        }
        int[] res = new int[numCourses];
        int index = 0;
        while(!queue.isEmpty()) {
            Course cur = queue.poll();
            res[index++] = cur.idx;
            map.remove(cur.idx);
            for(Course next : cur.nexts) {
                next.preq--;
                if(next.preq == 0)
                    queue.offer(next);
            }
        }
        return map.size() == 0 ? res : new int[0];
    }
}
class Course{
    int idx;
    int preq;
    ArrayList&amp;lt;Course&amp;gt; nexts;
    public Course(int index) {
        this.idx = index;
        this.preq = 0;
        this.nexts = new ArrayList&amp;lt;&amp;gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Repeated DNA Sequences</title>
      <link>http://xmxiaohuilin.github.io/2015/11/14/repeated-dna-sequences/</link>
      <pubDate>Sat, 14 Nov 2015 13:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/14/repeated-dna-sequences/</guid>
      <description>

&lt;p&gt;All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: &amp;ldquo;ACGAATTCCG&amp;rdquo;. When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.&lt;/p&gt;

&lt;p&gt;Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Given &lt;code&gt;s&lt;/code&gt; = &lt;code&gt;&amp;quot;AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT&amp;quot;&lt;/code&gt;, Return:  &lt;code&gt;[&amp;quot;AAAAACCCCC&amp;quot;, &amp;quot;CCCCCAAAAA&amp;quot;]&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;think-rolling-hash&#34;&gt;Think #Rolling Hash&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The idea based on the rolling hash, we store each segment as a hash code.&lt;/li&gt;
&lt;li&gt;If the segment repeated, its hashcode should be the same.&lt;/li&gt;
&lt;li&gt;Iterate through the input String, find each segment and its hashcode.&lt;/li&gt;
&lt;li&gt;Check the index map where has a index list more than one size.&lt;/li&gt;
&lt;li&gt;Just record a substring by the index bound from &lt;code&gt;list.get(0)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;O(n) time complexity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution-rolling-hash&#34;&gt;Solution #Rolling Hash&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public List&amp;lt;String&amp;gt; findRepeatedDnaSequences(String s) {
        Set&amp;lt;String&amp;gt; res = new HashSet&amp;lt;&amp;gt;();
        if(s==null||s.length()==0)
            return new ArrayList(res);
        Map&amp;lt;Character, Integer&amp;gt; dict = new HashMap&amp;lt;&amp;gt;();
        dict.put(&#39;A&#39;,0); dict.put(&#39;C&#39;,1); dict.put(&#39;G&#39;,2); dict.put(&#39;T&#39;,3);
       //int A_SIZE_POW_9 = (int) Math.pow(dict.size(), 9);
        Set&amp;lt;Integer&amp;gt; hashCodes = new HashSet&amp;lt;&amp;gt;();
        int hashCode = 0;
        for(int i=0;i&amp;lt;s.length();i++){
            if(i&amp;gt;9) // remove first 
                hashCode -= Math.pow(4,9)*dict.get(s.charAt(i-10));
            hashCode = 4*hashCode + dict.get(s.charAt(i));
            if(i&amp;gt;8&amp;amp;&amp;amp;!hashCodes.add(hashCode)) // set add operation return true
                res.add(s.substring(i-9,i+1));
        }
        return new ArrayList(res);
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Product of Array Except Self</title>
      <link>http://xmxiaohuilin.github.io/2015/11/14/product-of-array-except-self/</link>
      <pubDate>Sat, 14 Nov 2015 10:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/14/product-of-array-except-self/</guid>
      <description>

&lt;p&gt;Given an array of &lt;code&gt;n&lt;/code&gt; integers where &lt;code&gt;n&lt;/code&gt; &amp;gt; 1, nums, return an array output such that &lt;code&gt;output[i]&lt;/code&gt; is equal to the product of all the elements of nums except &lt;code&gt;nums[i]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Solve it &lt;strong&gt;without division&lt;/strong&gt; and in &lt;code&gt;O(n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, given &lt;code&gt;[1,2,3,4]&lt;/code&gt;, return &lt;code&gt;[24,12,8,6]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Follow up:
Could you solve it with constant space complexity? (Note: The &lt;strong&gt;output array does not count&lt;/strong&gt; as extra space for the purpose of space complexity analysis.)&lt;/p&gt;

&lt;h2 id=&#34;think-1&#34;&gt;Think #1&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;$$O(n)$$ Space and Two pass, recording the left part or right part product.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution-1&#34;&gt;Solution #1&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public int[] productExceptSelf(int[] input) {
        int[] res = new int[input.length];
        int tmp = 1;
        for (int i = 0; i &amp;lt; input.length; i++) {
            res[i] = tmp;
            tmp *= input[i];
        }
        tmp = 1;
        for (int i = input.length - 1; i &amp;gt;= 0; i--) {
            res[i] *= tmp;
            tmp *= input[i];
        }
        return res;
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Zigzag Iterator</title>
      <link>http://xmxiaohuilin.github.io/2015/11/13/zigzag-iterator/</link>
      <pubDate>Fri, 13 Nov 2015 20:40:29 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/13/zigzag-iterator/</guid>
      <description>

&lt;p&gt;Given two 1d vectors, implement an iterator to return their elements alternately.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Given two 1d vectors:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;v1&lt;/code&gt; = &lt;code&gt;[1, 2]&lt;/code&gt;
&lt;code&gt;v2&lt;/code&gt; = &lt;code&gt;[3, 4, 5, 6]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: &lt;code&gt;[1, 3, 2, 4, 5, 6]&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;follow-up&#34;&gt;Follow up&lt;/h3&gt;

&lt;p&gt;What if you are given k 1d vectors? How well can your code be extended to such cases?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Valid Number</title>
      <link>http://xmxiaohuilin.github.io/2015/11/13/valid-number/</link>
      <pubDate>Fri, 13 Nov 2015 16:13:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/13/valid-number/</guid>
      <description>

&lt;p&gt;Validate if a given string is numeric.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;quot; 0.1 &amp;quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;quot;abc&amp;quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;quot;1 a&amp;quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;quot;2e10&amp;quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This question focus on thinking about all of corner case

&lt;ol&gt;
&lt;li&gt;sign before the number (one sign; two sign)&lt;/li&gt;
&lt;li&gt;space before the number&lt;/li&gt;
&lt;li&gt;invalid character before / after the number&lt;/li&gt;
&lt;li&gt;&amp;lsquo;e&amp;rsquo; or &amp;lsquo;E&amp;rsquo; in the middle of number&lt;/li&gt;
&lt;li&gt;space after the number&lt;/li&gt;
&lt;li&gt;decimal checker&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;	public boolean isNumber(String s) {
        s = s.trim();
        int hasNum = 0;
        boolean allowE = true;
        boolean allowD = true;
        boolean afterE = true;

        for (int idx = 0; idx &amp;lt; s.length(); idx++) {
            char c = s.charAt(idx);
            if (c &amp;gt;= &#39;0&#39; &amp;amp;&amp;amp; c &amp;lt;= &#39;9&#39;) {
                hasNum++;
                if(!afterE)
                    afterE = true;
            } else if ((c == &#39;e&#39; || c == &#39;E&#39;) &amp;amp;&amp;amp; hasNum &amp;gt; 0 &amp;amp;&amp;amp; allowE) {
                allowE = afterE = false;
            } else if (c == &#39;.&#39; &amp;amp;&amp;amp; allowD &amp;amp;&amp;amp; allowE) {
                allowD  = false;
            } else if(c == &#39;-&#39; || c == &#39;+&#39;) {
                if(idx != 0 &amp;amp;&amp;amp; s.charAt(idx-1) != &#39;e&#39;) {
                    return false;
                }
            }else
                return false;
        }
        return hasNum&amp;gt;0 &amp;amp;&amp;amp; afterE;
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>