<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Career Cup on Cindy&#39;s Blog</title>
    <link>http://xmxiaohuilin.github.io/topics/career-cup/</link>
    <description>Recent content in Career Cup on Cindy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015 Cindy Lin.</copyright>
    <lastBuildDate>Tue, 08 Dec 2015 22:43:13 -0700</lastBuildDate>
    <atom:link href="http://xmxiaohuilin.github.io/topics/career-cup/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Minimum Maximum Path</title>
      <link>http://xmxiaohuilin.github.io/2015/12/08/minimum-maximum-path/</link>
      <pubDate>Tue, 08 Dec 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/12/08/minimum-maximum-path/</guid>
      <description>

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MaxMin {
    //private static int maxMin = Integer.MIN_VALUE;
    
    public static int maxMin(int[][] matrix) {
        int[] res = new int[1];
        res[0] = Integer.MIN_VALUE;
        dfs(matrix, 0, 0, Integer.MAX_VALUE, res);
        return res[0];
    }
    
    private static void dfs(int[][] matrix, int i, int j, int curMin, int[] res) {
        if (i == matrix.length || j == matrix[0].length) {
            return;
        }
        curMin = Math.min(curMin, matrix[i][j]);
        if (i == matrix.length - 1 &amp;amp;&amp;amp; j == matrix[0].length - 1) {
            res[0] = Math.max(res[0], curMin);
        }
        dfs(matrix, i + 1, j, curMin, res);
        dfs(matrix, i, j + 1, curMin, res);
    }
    
    public static void main(String[] args) {
        int[][] matrix = {{3,4,3},{2,3,4},{4,5,6}};
        int[][] matrix2 = {{8, 4, 7},{6, 5, 9}};
        System.out.println(maxMin(matrix2));
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Search Matrix</title>
      <link>http://xmxiaohuilin.github.io/2015/12/08/search-matrix/</link>
      <pubDate>Tue, 08 Dec 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/12/08/search-matrix/</guid>
      <description>

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class SearchMatrix {
	public static int search(int[][] matrix, int target) {
		if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
			return 0;
		}
		int count = 0;
		int i = 0, j = matrix[0].length - 1;
		while (i &amp;lt; matrix.length &amp;amp;&amp;amp; j &amp;gt;= 0) {
			if (matrix[i][j] == target) {
				count++;
				i++;
				j--;
			} else if (matrix[i][j] &amp;gt; target) {
				j--;
			} else {
				i++;
			}
		}
		return count;
	}
	
	public static void main(String[] args) {
		int[][] matrix = {{1, 2, 3, 4},{2, 3, 4, 7},{4, 5, 6, 8}};
		System.out.println(search(matrix, 4));
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Two Sum Cloeset</title>
      <link>http://xmxiaohuilin.github.io/2015/12/08/two-sum-cloeset/</link>
      <pubDate>Tue, 08 Dec 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/12/08/two-sum-cloeset/</guid>
      <description>

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class TwoSumClosest {
    static class Container {
        public double first;
        public double second;
    }
    public static Container findOptimalWeight(double[] weight, double capacity) {
        Container res = new Container();
        if (weight == null || weight.length == 0) {
            return res;
        }
        
        Arrays.sort(weight);
        int l = 0, r = weight.length - 1;
        double closest = Integer.MAX_VALUE;
        while (l &amp;lt; r) {
            if (weight[l] + weight[r] == capacity) {
                res.first = weight[l];
                res.second = weight[r];
                return res;
            }
            double diff = capacity - weight[l] - weight[r];
            if (diff &amp;gt; 0 &amp;amp;&amp;amp; diff &amp;lt; closest) {
                closest = diff;
                res.first = weight[l];
                res.second = weight[r];
            }
            if (weight[l] + weight[r] &amp;gt; capacity) {
                r--;
            } else {
                l++;
            }
        }
        
        return res;
    }
    
    public static void main(String[] args) {
        double[] weight = {1.0, 1.5, 7.0, 2.8, 4.8, 1.6, 9.1};
        Container res = findOptimalWeight(weight, 7.0);
        System.out.println(res.first);
        System.out.println(res.second);
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Windows Minimum</title>
      <link>http://xmxiaohuilin.github.io/2015/12/08/windows-minimum/</link>
      <pubDate>Tue, 08 Dec 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/12/08/windows-minimum/</guid>
      <description>

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class WindowMin {
	public static List&amp;lt;Integer&amp;gt; windowMin3(ArrayList&amp;lt;Integer&amp;gt; list, int w) {
		List&amp;lt;Integer&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();
		if (list == null || list.size() &amp;lt; w || w &amp;lt;= 0) {
			return res;
		}
		
		Deque&amp;lt;Integer&amp;gt; deque = new ArrayDeque&amp;lt;&amp;gt;();
		
		for (int i = 0; i &amp;lt; list.size(); i++) {
			while (!deque.isEmpty() &amp;amp;&amp;amp; deque.peek() &amp;lt;= i - w) {
				deque.poll();
			}
			while (!deque.isEmpty() &amp;amp;&amp;amp; list.get(deque.peekLast()) &amp;gt; list.get(i)) {
				deque.pollLast();
			}
			deque.offer(i);
			if (i &amp;gt;= w - 1) {
				res.add(list.get(deque.peek()));
			}
		}
		
		return res;
	}
	
	public static void main(String[] args) {
		ArrayList&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
		list.add(6);
		list.add(2);
		list.add(3);
		list.add(1);
		list.add(1);
		list.add(4);
		list.add(2);
		System.out.println(windowMin3(list, 3));
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Longest Palindromic Substring</title>
      <link>http://xmxiaohuilin.github.io/2015/11/19/longest-palindromic-substring/</link>
      <pubDate>Thu, 19 Nov 2015 14:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/19/longest-palindromic-substring/</guid>
      <description>

&lt;p&gt;Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Given the string = &lt;code&gt;&amp;quot;abcdzdcab&amp;quot;&lt;/code&gt;, return &lt;code&gt;&amp;quot;cdzdc&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;challenge&#34;&gt;Challenge&lt;/h3&gt;

&lt;p&gt;O(n2) time is acceptable. Can you do it in O(n) time.&lt;/p&gt;

&lt;h2 id=&#34;think-2&#34;&gt;Think #2&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One pass on each position in string characters, assume the axis of symmetry on each character or between two character:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    |                       |
c a b a c f     or     c a b a c f
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On each axis of symmetry we get the left and right pointers and make them move toward left or right&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;left right           
   \ /                 
c a b a c f 

...or...        

    l r
    | |
c a b a c f
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    /**
     * @param s input string
     * @return the longest palindromic substring
     */
    private String LongestPalindromeSubstringI(String str) {
        int maxLen = 0;
        String maxSubstr = &amp;quot;&amp;quot;;
        // memorized whether it is palindromical in str (i, j)
        boolean[][] memo = new boolean[str.length()][str.length()];
        for (int i = str.length() - 1; i &amp;gt;= 0; i--) {
            for (int j = i; j &amp;lt; str.length(); j++) {
                if ((j - i &amp;lt; 2 || memo[i + 1][j - 1])
                        &amp;amp;&amp;amp; str.charAt(i) == str.charAt(j)) {
                    memo[i][j] = true;
                    if (j - i + 1 &amp;gt; maxLen) {
                        maxSubstr = str.substring(i, j + 1);
                        maxLen = j - i + 1;
                    }
                }
            }
        }
        return maxSubstr;
    }

    private String LongestPalindromeSubstringII(String str) {
        if(str == null || str.length() == 0)
            return &amp;quot;&amp;quot;;
        // record current longest length
        int maxLen = 0;
        String maxSubstr = &amp;quot;&amp;quot;;
        for (int i = 0; i &amp;lt; str.length(); i++) {
            // find the longest palindrome, when symmetry axis is the current index
            String case1 = expandFromCenter(str, i, i);
            // find the longest palindrome, when symmetry axis is between the current index and next index
            String case2 = expandFromCenter(str, i, i + 1);
            
            if (Math.max(case1.length(), case2.length()) &amp;gt; maxLen) {
                maxLen = Math.max(case1.length(), case2.length());
                maxSubstr = case1.length() &amp;gt; case2.length() ? case1 : case2;
            }
        }
        return maxSubstr;
    }

    private String expandFromCenter(String str, int left, int right) {
        // expand the left and right index two opposite sides
        while ( left &amp;gt;= 0
                &amp;amp;&amp;amp; right &amp;lt; str.length()&amp;amp;&amp;amp;str.charAt(left) == str.charAt(right)) {
            left--;
            right++;
        }
        return str.substring(left + 1, right);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;analysis&#34;&gt;Analysis&lt;/h2&gt;

&lt;p&gt;One pass from 0 - $$len \times 2$$; inside the loop the palindromic substring search also costs a loop from l - r; So the total is O($$n^2$$);&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Find a Path in Maze</title>
      <link>http://xmxiaohuilin.github.io/2015/11/19/find-a-path-in-maze/</link>
      <pubDate>Thu, 19 Nov 2015 12:33:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/19/find-a-path-in-maze/</guid>
      <description>

&lt;p&gt;Find path in given 2D matrix. 3 states, &lt;code&gt;0&lt;/code&gt; means allow to go, &lt;code&gt;1&lt;/code&gt; means the obstacle, &lt;code&gt;9&lt;/code&gt; is the final, return true or false if the path exist from &lt;code&gt;(0,0)&lt;/code&gt; to any position contains &lt;code&gt;9&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	/**
	 * DFS Implementation
	 * @param matrix as maze
	 * @param x start position
	 * @param y start position
	 * @return
	 */
	public static boolean findPath(int[][] matrix, int x, int y) {
		// output for edge cases
		if (matrix == null || matrix.length == 0 || matrix[0].length == 0
				|| matrix[x][y] == 1) {
			return false;
		}
		// the steps for x and y
		int[] sx = { 0, 0, -1, 1 };
		int[] sy = { 1, -1, 0, 0 };

		// if current position is &#39;9&#39;
		if (matrix[x][y] == 9)
			return true;
		// set current value to 1 avoid the duplicate visiting
		matrix[x][y] = 1;
		
		// dfs to try the path in matrix
		for (int i = 0; i &amp;lt; 4; i++) {
			int nx = x + sx[i];
			int ny = y + sy[i];
			if (nx &amp;gt;= 0 &amp;amp;&amp;amp; nx &amp;lt; matrix.length &amp;amp;&amp;amp; ny &amp;gt;= 0
					&amp;amp;&amp;amp; ny &amp;lt; matrix[nx].length &amp;amp;&amp;amp; matrix[nx][ny] != 1) {
				if (findPath(matrix, nx, ny))
					return true;
			}
		}
		return false;
	}

	/**
	 * BFS Implementation
	 * @param matrix as maze
	 * @param x start position
	 * @param y start position
	 * @return
	 */
	public static boolean findPathII(int[][] matrix, int x, int y) {
		if (matrix == null || matrix.length == 0 || matrix[0].length == 0
				|| matrix[x][y] == 1) {
			return false;
		}
		// the steps for x and y
		int[] sx = { 0, 0, -1, 1 };
		int[] sy = { 1, -1, 0, 0 };

		// setup a queue to do the bfs
		Queue&amp;lt;int[]&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;();
		queue.offer(new int[] { x, y });
		matrix[x][y] = 1;
		while (!queue.isEmpty()) {
			int[] cur = queue.poll();
			if (matrix[cur[0]][cur[1]] == 9) 
				return true;
			
			matrix[cur[0]][cur[1]] = 1;
			for (int i = 0; i &amp;lt; 4; i++) {
				int nx = cur[0] + sx[i];
				int ny = cur[1] + sy[i];
				if (nx &amp;gt;= 0 &amp;amp;&amp;amp; nx &amp;lt; matrix.length &amp;amp;&amp;amp; ny &amp;gt;= 0
						&amp;amp;&amp;amp; ny &amp;lt; matrix[nx].length &amp;amp;&amp;amp; matrix[nx][ny] != 1) {
					queue.offer(new int[] { nx, ny });
					matrix[nx][ny] = 1;
				}
			}
		}
		return false;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;time-complexity&#34;&gt;Time Complexity&lt;/h2&gt;

&lt;p&gt;For DFS, it takes much space $O(m * n)$ since the recursion stack,  while the time complexity is $O(m * n)$. More specifically, the space complexity depends on the maze type and the step direction order.&lt;/p&gt;

&lt;p&gt;For BFS, it take less space, since every time the queue only store the valid neighbors according to current layer for a certain node. In matrix, the maximum layer size is the valid node number in diagonal. So the complexity is $O(\sqrt{n^2 + m^2})$. But the time complexity is the same as DFS with $O(m * n)$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Amplitude of Tree</title>
      <link>http://xmxiaohuilin.github.io/2015/11/18/amplitude-of-tree/</link>
      <pubDate>Wed, 18 Nov 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/18/amplitude-of-tree/</guid>
      <description>

&lt;p&gt;Given a tree of N nodes, return the amplitude of the tree. In a binary tree T, a path P is a non-empty sequence of nodes of tree such that, each consecutive node in the sequence is a subtree of its preceding node. In the example tree, the sequences &lt;code&gt;[9, 8, 2]&lt;/code&gt; and &lt;code&gt;[5, 8, 12]&lt;/code&gt; are two paths, while &lt;code&gt;[12, 8, 2]&lt;/code&gt; is not. The amplitude of path P is the maximum difference among values of nodes on path P. The amplitude of tree T is the maximum amplitude of all paths in T. When the tree is empty, it contains no path, and its amplitude is treated as 0.&lt;/p&gt;

&lt;h3 id=&#34;exmaple&#34;&gt;Exmaple&lt;/h3&gt;

&lt;p&gt;Input:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;         5
       /   \
    8        9
   /  \     /  \ 
  12   2   8    4
          /    /
        2    5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output: &lt;code&gt;7&lt;/code&gt; since there are paths &lt;code&gt;[5, 8, 12]&lt;/code&gt; and &lt;code&gt;[9, 8, 2]&lt;/code&gt; have the maximum amplitude &lt;code&gt;7&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Recursion, record the max value and min value a certain path.&lt;/li&gt;
&lt;li&gt;And recursively check each node on the path to that leaf and there differences.&lt;/li&gt;
&lt;li&gt;Set a global variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
    public static int treeAmplitude(TreeNode root) {
        if (root == null)
            return 0;
        // setup an array to record [0] minimum in a certain path,
        // [1] maximum in a certain path, [2] the global maximum difference in
        // tree
        int[] mx = new int[1];
        List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
        list.add(Integer.MIN_VALUE);
        list.add(Integer.MAX_VALUE);
        recursionHelper(root, list, mx);
        return mx[0];
    }

    /**
     * @param node
     *            - current root node in tree
     * @param prev
     *            - record the minimum and maximum value in current path
     * @param mx
     *            - record global maximum amplitude
     **/
    private static void recursionHelper(TreeNode node, List&amp;lt;Integer&amp;gt; prev,
            int[] mx) {
        // update the min or max in current path
        List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
        list.add(Math.max(prev.get(0), node.val));
        list.add(Math.min(prev.get(1), node.val));
        // once find the leaf node terminate the recursion
        // and caculate current amplitude in this path
        if (node.left == null &amp;amp;&amp;amp; node.right == null) {
            int diff = list.get(0) - list.get(1);
            mx[0] = Math.max(mx[0], diff);
            return;
        }
        // check each child node if existed
        if (node.left != null)
            recursionHelper(node.left, list, mx);
        if (node.right != null)
            recursionHelper(node.right, list, mx);
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Arithmetic Sequence</title>
      <link>http://xmxiaohuilin.github.io/2015/11/18/arithmetic-sequence/</link>
      <pubDate>Wed, 18 Nov 2015 13:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/18/arithmetic-sequence/</guid>
      <description>

&lt;p&gt;A sequence of numbers is called &lt;em&gt;Arithmetic&lt;/em&gt; if it consists of at least three elements and if the difference between any two consecutive elements is the same. For example, &lt;code&gt;[1,3,5,7,9]&lt;/code&gt;, &lt;code&gt;[7,7,7,7,7]&lt;/code&gt; and &lt;code&gt;[3,-1,-5,-9]&lt;/code&gt; are arithmetic.&lt;/p&gt;

&lt;p&gt;A slice (P, Q) of Array A is called arithmetic if the sequence:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	A[P], A[P+1], ..., A[Q-1],A[Q]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is arthmetic. In particular, this means that &lt;code&gt;P+1 &amp;lt; Q&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Write a function: &lt;code&gt;class Solution { public int solution(int[] A);}&lt;/code&gt; that, given array &lt;code&gt;A&lt;/code&gt; consisting of &lt;code&gt;N&lt;/code&gt; numbers, returns the number of arithmetic slices in &lt;code&gt;A&lt;/code&gt;. The function should return &lt;code&gt;-1&lt;/code&gt; if the result exceeds 1,000,000,000.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;A[0] = -1, A[1] = 1, A[2] = 3, A[3] = 3, A[4] = 3, A[5] = 2, A[6] = 1, A[7] = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should return &lt;code&gt;5&lt;/code&gt; since there are five arithmetic slices of that array, namely:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{0, 2}, {2, 4}, {4, 6}, {4, 7}, {5, 7}
``


## Solution
```java
public class Solution{
	public int countArithmetic(int[] array) {
		if(array.length &amp;lt; 3) 
			return 0;
		int total = 0;
		int idx = 1;
		while(idx &amp;lt; array.length) {
			int curSlice = 2;
			int diff = array[idx] - array[idx-1];
			// if the difference between two consecutive numbers is the same
			while(++idx &amp;lt; array.length &amp;amp;&amp;amp; array[idx] - array[idx-1] == diff) {
				curSlice++;
			}

			if(curSlice &amp;gt;= 3) {
				// when slice length = 3 -&amp;gt; count 1, = 4 -&amp;gt; 1*2, = 5 -&amp;gt; 1*2*3...
				total += ((curSlice - 2) * (curSlice - 1) / 2);
			}
		}
		return (total &amp;gt; 1000000000) ? -1 :total;
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sum of Difference on Four Integers</title>
      <link>http://xmxiaohuilin.github.io/2015/11/18/sum-of-difference-on-four-integers/</link>
      <pubDate>Wed, 18 Nov 2015 13:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/18/sum-of-difference-on-four-integers/</guid>
      <description>

&lt;p&gt;Given four integers, make &lt;code&gt;F(S)&lt;/code&gt; = &lt;code&gt;abs(S[0] - S[1])&lt;/code&gt; + &lt;code&gt;abs(S[1] - S[2])&lt;/code&gt; + &lt;code&gt;abs(S[2] - S[3])&lt;/code&gt; to be largest.&lt;/p&gt;

&lt;h2 id=&#34;solution-general-method&#34;&gt;Solution #General Method&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
    public int maxDiff(int[] arr) {
        List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();
        permutation(res, new ArrayList&amp;lt;&amp;gt;(), arr);
        int max = 0;
        List&amp;lt;Integer&amp;gt; maxLine = new ArrayList&amp;lt;&amp;gt;();
        for(List&amp;lt;Integer&amp;gt; each : res) {
            int cur = 0;
            for(int i = 1; i &amp;lt; each.size(); i++) 
                cur += Math.abs(each.get(i) - cur.get(i-1));
            if(max &amp;lt;= cur) {
                max = cur;
                maxLine = each;
            }
        }
        System.out.println(maxLine);
        return max;
    }

    private void permutation(List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res, List&amp;lt;Integer&amp;gt; curRes, int[] arr) {
        if(curRes.size() == arr.length) {
            res.add(new ArrayList&amp;lt;&amp;gt;(curRes));
            return;
        }

        for(int i = 0; i &amp;lt; arr.length; i++) {
            if(curRes.contains(arr[i]))
                continue;
            curRes.add(arr[i]); 
            permutation(res, curRes, arr);
            curRes.remove(curRes.size() - 1);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find Loops in Linked List</title>
      <link>http://xmxiaohuilin.github.io/2015/11/18/find-loops-in-linked-list/</link>
      <pubDate>Wed, 18 Nov 2015 12:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/18/find-loops-in-linked-list/</guid>
      <description>

&lt;p&gt;Given a linked list, find if it has a loop inside and return the loop beginning if it has the loop&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
    public boolean findLoop(ListNode root) {
        if(root == null || root.next == null)
            return false;
        ListNode runner = root;
        ListNode walker = root;
        while(runner != null &amp;amp;&amp;amp; runner.next != null) {
            runner = runner.next.next;
            walker = walker.next;
            if(runner == walker)
                return true;
        }
        return false;
    }

    public ListNode findLoopEntry(ListNode root){
        if(root == null || root.next == null)
            return root;
        ListNode runner = root;
        ListNode walker = root;
        while(runner != null &amp;amp;&amp;amp; runner.next != null) {
            runner = runner.next.next;
            walker = walker.next;
            if(runner == walker)
                break;
        }
        if(runner == null || runner.next == null)
            return null;
        walker = root;
        while(walker != runner) {
            walker = walker.next;
            runner = runner.next;
        }
        return walker;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>LRU Problem</title>
      <link>http://xmxiaohuilin.github.io/2015/11/18/lru-problem/</link>
      <pubDate>Wed, 18 Nov 2015 12:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/18/lru-problem/</guid>
      <description>

&lt;p&gt;Given the max size of a LRU cache and a input array, calculate the miss times.&lt;/p&gt;

&lt;p&gt;## Solution # LinkedHashMap&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MissingCacheII {
	public static int countMiss(int[] arr, int size) {
		if(arr == null || arr.length == 0)
			return 0;
		
		Cache cache = new Cache(size);
		int cnt = 0;
		for(int i = 0; i &amp;lt; arr.length; i ++) {
			if(cache.get(arr[i]) &amp;lt; 0) 
				cnt++;
			cache.put(arr[i], i);		
		}
		return cnt;
	}

	static class Cache {
		int capacity; // the capacity of cache
		Map&amp;lt;Integer, Integer&amp;gt; map; // use linkedhashmap to store elements

		public Cache(int capacity) {
			this.capacity = capacity;
			// setup the loadFactor with 0.75, and set the access order as true so that it can be a LRU cache
			this.map = new LinkedHashMap&amp;lt;Integer, Integer&amp;gt;(capacity, 0.75f,
					true) {
				// remove the eldest element when the size exceed the capacity
				protected boolean removeEldestEntry(
						Map.Entry&amp;lt;Integer, Integer&amp;gt; entry) {
					return size() &amp;gt; capacity;
				}
			};
		}

		public int get(int key) {
			if (map.containsKey(key))
				return map.get(key);
			else
				return -1;
		}

		public void put(int key, int val) {
			map.put(key, val);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-doubly-linked-list-hash-map&#34;&gt;Solution #Doubly Linked List + Hash Map&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MissingCache {

	public static int countMissing(int[] arr, int size) {
		int missCnt = 0;
		if (arr == null || arr.length == 0)
			return missCnt;
		Cache cache = new Cache(size);
		for (int i : arr) {
			if (cache.insert(i) == 1)
				missCnt++;
		}
		return missCnt;
	}

	static class Cache {
		int size;
		int thresHold;
		DLLNode head, rear;
		HashMap&amp;lt;Integer, DLLNode&amp;gt; map = new HashMap&amp;lt;&amp;gt;();

		public Cache(int thresHold) {
			this.size = 0;
			this.thresHold = thresHold;
			this.head = new DLLNode(0, 0);
			this.rear = new DLLNode(0, 0);
			this.head.next = rear;
			this.rear.prev = head;
		}

		public void insertHead(DLLNode newnode) {
			head.next.prev = newnode;
			newnode.next = head.next;
			newnode.prev = head;
			head.next = newnode;
		}

		public DLLNode remove(DLLNode remove) {
			remove.prev.next = remove.next;
			remove.next.prev = remove.prev;
			return remove;
		}

		public int insert(int key, int val) {
			DLLNode newnode = new DLLNode(key, val);
			if (map.containsKey(key)) {
				DLLNode node = map.get(key);
				remove(node);
				insertHead(newnode);
				return node.val;
			} else {
				if (size &amp;gt;= thresHold) {
					DLLNode remove = remove(rear.prev);
					map.remove(remove.key);
					size--;
				}
				insertHead(newnode);
				map.put(key, newnode);
				size++;
				return -1;
			}
		}
	}

	static class DLLNode {
		int key;
		int val;
		DLLNode prev, next;

		public DLLNode(int key, int val) {
			this.key = key;
			this.val = val;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Process Schedule Problems</title>
      <link>http://xmxiaohuilin.github.io/2015/11/18/process-schedule-problems/</link>
      <pubDate>Wed, 18 Nov 2015 12:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/18/process-schedule-problems/</guid>
      <description>

&lt;p&gt;Process schedule is very important to Operation System. There are several algorithm to deal with such problem. Here we discuss two of them. At first, we are given a process class for coding conveninence.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Process implements Comparable&amp;lt;Process&amp;gt; {
	int arrTime;
	int exeTime;

	public Process(int arrTime, int exeTime) {
		this.arrTime = arrTime;
		this.exeTime = exeTime;
	}

	// for shortest job first problem
	@Override
	public int compareTo(Process that) {
		if (this.exeTime == that.exeTime)
			return this.arrTime - that.arrTime;
		return this.exeTime - that.exeTime;
	}

	@Override
	public String toString() {
		return &amp;quot;arrTime: &amp;quot; + this.arrTime;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;problem-one&#34;&gt;Problem One&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Robin Round:&lt;/strong&gt; The question is about the robin round. Given an array with start time of each task and another array represent the executing time of each task and &lt;code&gt;q&lt;/code&gt; for quantum which is allowance of CPU time, means the maximum time for exeuting one task. Write a function, calculate the average waiting time on each task.&lt;/p&gt;

&lt;h2 id=&#34;solution-robin-round&#34;&gt;Solution #Robin Round&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public double robinRound(int[] arrTime, int[] exeTime, int q) {
		// edge cases
		if (arrTime == null || exeTime == null
				|| exeTime.length != arrTime.length)
			return 0;

		int waitTime = 0; // total Waiting time
		int len = arrTime.length; // the len of time list
		int idx = 0; // pointer for iterate through time list
		Queue&amp;lt;Process&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;(); // store those processes

		int curTime = 0; // tracking current time
		while (!queue.isEmpty() || idx &amp;lt; len) {
			if (queue.isEmpty()) {
				queue.offer(new Process(arrTime[idx], exeTime[idx]));
				curTime = arrTime[idx++];
			} else {
				// poll out a Process from queue
				Process curP = queue.poll();
				// calculate the waiting time on this process and add it to the
				// total waitTime
				waitTime += Math.abs(curP.arrTime - curTime);
				// update curTime track according to the limit of &#39;q&#39;
				curTime = Math.min(curTime + q, curTime + curP.exeTime);
				while (idx &amp;lt; len &amp;amp;&amp;amp; arrTime[idx] &amp;lt;= curTime)
					queue.offer(new Process(arrTime[idx], exeTime[idx++]));
				// if the current process still not be executed according to the
				// &#39;quantum&#39; limit, use curTime minus that &#39;q&#39; as new exeTime
				// and count curTime as new arrTime for new Process, then put it
				// back to the queue
				if (curP.exeTime &amp;gt; q) {
					curP.exeTime -= q;
					curP.arrTime = curTime;
					queue.offer(curP);
				}
			}
		}
		return (double) waitTime / len;
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;problem-two&#34;&gt;Problem Two&lt;/h2&gt;

&lt;p&gt;Given an array with start time of each task and another array represent the executing time of each task. Process these task by the principle that the shortest job should always run firstly. Write a function to achieve that.&lt;/p&gt;

&lt;h2 id=&#34;solution-shortest-job-first&#34;&gt;Solution #Shortest Job First&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public static double shortestJobFirst(int[] arrTime, int[] exeTime) {
		if (arrTime == null || exeTime == null
				|| exeTime.length != arrTime.length)
			return 0;

		int waitTime = 0; // total Waiting time
		int len = arrTime.length; // the len of time list
		int idx = 0; // pointer for iterate through time list
		PriorityQueue&amp;lt;Process&amp;gt; heap = new PriorityQueue&amp;lt;&amp;gt;();
		int curTime = 0; // tracking current time
		while (!heap.isEmpty() || idx &amp;lt; len) {
			if (heap.isEmpty()) {
				heap.offer(new Process(arrTime[idx], exeTime[idx]));
				curTime = arrTime[idx++];
			} else {
				Process curP = heap.poll();
				System.out.println(curP);
				waitTime += Math.abs(curP.arrTime - curTime);
				curTime += curP.exeTime;
				while (idx &amp;lt; len &amp;amp;&amp;amp; arrTime[idx] &amp;lt;= curTime)
					heap.offer(new Process(arrTime[idx], exeTime[idx++]));
			}
		}
		return (double) waitTime / len;
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Rotate Matrix</title>
      <link>http://xmxiaohuilin.github.io/2015/11/18/rotate-matrix/</link>
      <pubDate>Wed, 18 Nov 2015 12:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/18/rotate-matrix/</guid>
      <description>

&lt;p&gt;Given A Matrix and rotate by input flag represent the direction of rotation.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class RotateMatrix {
	public static int[][] rotateMatrix(int[][] matrix, boolean flag) {
		if (matrix == null || matrix.length &amp;lt;= 1 || matrix[0].length &amp;lt;= 1) {
			return matrix;
		}
		
		int[][] res = transpose(matrix);
		int m = res.length;
		int n = res[0].length;
		
		if (flag) {
			for (int i = 0; i &amp;lt; m; i++) {
				for (int j = 0; j &amp;lt; n / 2; j++) {
					int temp = res[i][j];
					res[i][j] = res[i][n - 1 - j];
					res[i][n - 1 - j] = temp;
				}
			}
		} else {
			for (int j = 0; j &amp;lt; n; j++) {
				for (int i = 0; i &amp;lt; m / 2; i++) {
					int temp = res[i][j];
					res[i][j] = res[m - 1 - i][j];
					res[m - 1 - i][j] = temp;
				}
			}
		}
		
		return res;
	}	
	
	private static int[][] transpose(int[][] matrix) {
		int a = matrix.length;
		int b = matrix[0].length;
		// get the new matrix with reversed index
		int[][] newMatrix = new int[b][a];
		
		// transpose the value on original matrix to new position on new matrix
		for (int i = 0; i &amp;lt; b; i++) {
			for (int j = 0; j &amp;lt; a; j++) {
				newMatrix[i][j] = matrix[j][i];
			}
		}
		
		return newMatrix;
	}
	
	public static void main(String[] args) {
		int[][] matrix = {{1, 2, 3}, {4, 5, 6}};
		int[][] res = rotateMatrix(matrix, false);
		for (int i = 0; i &amp;lt; matrix.length; i++) {
			for (int j = 0; j &amp;lt; matrix[0].length; j++) {
				System.out.print(matrix[i][j] + &amp;quot; &amp;quot;);
			}
			System.out.println();
		}
		System.out.println();
		for (int i = 0; i &amp;lt; res.length; i++) {
			for (int j = 0; j &amp;lt; res[0].length; j++) {
				System.out.print(res[i][j] + &amp;quot; &amp;quot;);
			}
			System.out.println();
		}
	}
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Two Sum Count</title>
      <link>http://xmxiaohuilin.github.io/2015/11/18/two-sum-count/</link>
      <pubDate>Wed, 18 Nov 2015 12:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/18/two-sum-count/</guid>
      <description>

&lt;p&gt;Given an array and a target number, count how many pair in this array can sum to that target number.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public int countTwoSum(int[] arr, int tar) {
		if(arr == null || arr.length == 0)
			return 0;
		int cnt = 0;
		// store all number in this array
		HashSet&amp;lt;Integer&amp;gt; set = new HashSet&amp;lt;&amp;gt;();
		for(int i = 0; i &amp;lt; arr.length; i++) {
			// if any number hit in hashset, that means a pair can sum to the target number
			if(set.contains(tar - arr[i]))
				cnt ++;
			set.add(arr[i]);
		}
		return cnt;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-if-input-integers-has-duplicate&#34;&gt;Solution #If input integers has duplicate&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    public static int TwoSumCount(int[] nums, int target) {
        if (nums == null || nums.length &amp;lt; 2)    return 0;
        Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;Integer, Integer&amp;gt;();
        int count = 0;
        for (int i = 0; i &amp;lt; nums.length; i++) {
            if (map.containsKey(target - nums[i]))
                count += map.get(target - nums[i]);
            map.put(nums[i], map.containsKey(nums[i]) ? map.get(nums[i]) + 1 : 1);
        }
        return count;
    }
    
    public static void main(String[] args) {
        int rvalue = TwoSumCount(new int[] {1, 1, 2, 3, 4}, 5);
        System.out.println(rvalue);
        return;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Windows Sum</title>
      <link>http://xmxiaohuilin.github.io/2015/11/18/windows-sum/</link>
      <pubDate>Wed, 18 Nov 2015 11:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/18/windows-sum/</guid>
      <description>

&lt;p&gt;Given a list of integers and a window size, return a new list of integers where each integer is the sum of all integers in the kth window of of input list. The kth window of the input list is the integers from index k to index k + windows size - 1 (inclusive).&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;[4, 2, 73, 11, -5]&lt;/code&gt; and windows size &lt;code&gt;2&lt;/code&gt; should return &lt;code&gt;[6, 75, 84, 6]&lt;/code&gt;, if windows size &lt;code&gt;3&lt;/code&gt; should return &lt;code&gt;[79, 86, 79]&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;solution-array-version&#34;&gt;Solution #Array Version&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public int[] windowsSum(int[] arr, int wSize) {
		int[] res = new int[arr.length - wSize + 1];
		int curSum = 0;
		int idx = 0;
		int resIdx = 0;
		while(idx &amp;lt; arr.length) {
			curSum += arr[idx];
			if(idx &amp;gt;= wSize - 1) {
				res[resIdx++] = curSum;
				curSum -= arr[idx - wSize + 1];
			}
			idx++;
		}
		return res;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-arraylist-version&#34;&gt;Solution #ArrayList Version&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public List&amp;lt;Integer&amp;gt; windowsSum(List&amp;lt;Integer&amp;gt; arr, int wSize) {
	    if(arr == null || arr.size() &amp;lt; wSize)
			return new ArrayList&amp;lt;&amp;gt;();

		List&amp;lt;Integer&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();
		int curSum = 0; // count current sum
		int idx = 0; // index pointer for res array
		for(int i = 0; i &amp;lt; arr.size(); i++) {
			curSum += arr.get(i);
			if(i + 1 &amp;gt;= wSize) {
				res.add(curSum); // write current sum on the res array
				curSum -= arr.get(idx++); // reduce the prev number out of windows
			} 
		}
		return res;
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>