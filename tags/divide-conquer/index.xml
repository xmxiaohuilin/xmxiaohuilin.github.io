<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Divide Conquer on Cindy&#39;s Blog</title>
    <link>http://xmxiaohuilin.github.io/tags/divide-conquer/</link>
    <description>Recent content in Divide Conquer on Cindy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015 Cindy Lin.</copyright>
    <lastBuildDate>Fri, 11 Sep 2015 19:06:42 -0700</lastBuildDate>
    <atom:link href="http://xmxiaohuilin.github.io/tags/divide-conquer/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Fast Power</title>
      <link>http://xmxiaohuilin.github.io/2015/09/11/fast-power/</link>
      <pubDate>Fri, 11 Sep 2015 19:06:42 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/09/11/fast-power/</guid>
      <description>

&lt;p&gt;Calculate the $ a^n \mod b $  where a, b and n are all 32bit integers.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example:&lt;/h3&gt;

&lt;p&gt;For 231 % 3 = 2
 For 1001000 % 1000 = 0&lt;/p&gt;

&lt;h3 id=&#34;challenge&#34;&gt;Challenge:&lt;/h3&gt;

&lt;p&gt;Time complexity: $O(logn)$&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Divide and Conquer&lt;/li&gt;
&lt;li&gt;Think about the two basic condition: n is 1 and n is 0;&lt;/li&gt;
&lt;li&gt;Each time we divide the n into two part (n/2);&lt;/li&gt;
&lt;li&gt;Then we got the combine value (divide * divide) from both parts (they&amp;rsquo;re eqaul, actually);&lt;/li&gt;
&lt;li&gt;While n is odd, we need to add one more &amp;ldquo;a&amp;rdquo; time (*a);&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Solution {
    /*
     * @param a, b, n: 32bit integers
     * @return: An integer
     */
    public int fastPower(int a, int b, int n) {

        if(n == 1)
            return a % b;
        
        if(n == 0)
            return 1 % b;
        
        long divide = fastPower(a, b, n/2);
        long combine = divide * divide;
        combine %= b;
        if(n % 2 == 1)
            combine *= (long)a;
        combine %= b;
        return (int)combine;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>