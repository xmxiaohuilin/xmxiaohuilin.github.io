<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Backtracking on Cindy&#39;s Blog</title>
    <link>http://xmxiaohuilin.github.io/tags/backtracking/</link>
    <description>Recent content in Backtracking on Cindy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015 Cindy Lin.</copyright>
    <lastBuildDate>Sat, 14 Nov 2015 10:43:13 -0700</lastBuildDate>
    <atom:link href="http://xmxiaohuilin.github.io/tags/backtracking/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Can I Win</title>
      <link>http://xmxiaohuilin.github.io/2015/11/14/can-i-win/</link>
      <pubDate>Sat, 14 Nov 2015 10:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/14/can-i-win/</guid>
      <description>

&lt;p&gt;Given an array of positive integers and two players. In each turn, one player picks up one number and if the sum of all the picked up numbers is greater than a target number, the player wins. Write a program &lt;code&gt;canIWin()&lt;/code&gt; to print the result.&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This question is pretty tricky.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not just choose the largest number in number pool. Instead of, for each turn, player has two choice:

&lt;ul&gt;
&lt;li&gt;If current pool has number can just make the sum larger than target, pick that number&lt;/li&gt;
&lt;li&gt;If not number can added to make the sum exceed target, try to make current pick with the minimum number from the pool.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;        public static Result canIWin(int[] nums, int target) {
                if (target &amp;lt;= 0)
                        return Result.Lose;
                // first iterate - find any number larger than remain target, or check
                // all number in pool has taken
                boolean hasNum = false;
                for (int num : nums) {
                        if (num &amp;gt;= target)
                                return Result.Win;
                        else if (num &amp;gt; 0)
                                hasNum = true;
                }
                if (!hasNum)
                        return Result.Draw;
                for (int i = 0; i &amp;lt; nums.length; i++) {
                        if (nums[i] &amp;gt; 0) {
                                int data = nums[i];
                                nums[i] = -1;
                                Result rivalResult = canIWin(nums, target - data);
                                if (rivalResult == Result.Win)
                                        return Result.Lose;
                                if (rivalResult == Result.Lose)
                                        return Result.Win;
                                nums[i] = data;
                        }
                }
                return Result.Draw;
        }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Expression Add Operators</title>
      <link>http://xmxiaohuilin.github.io/2015/11/12/expression-add-operators/</link>
      <pubDate>Thu, 12 Nov 2015 12:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/12/expression-add-operators/</guid>
      <description>

&lt;p&gt;Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value.&lt;/p&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;123&amp;quot;, 6 -&amp;gt; [&amp;quot;1+2+3&amp;quot;, &amp;quot;1*2*3&amp;quot;] 
&amp;quot;232&amp;quot;, 8 -&amp;gt; [&amp;quot;2*3+2&amp;quot;, &amp;quot;2+3*2&amp;quot;]
&amp;quot;105&amp;quot;, 5 -&amp;gt; [&amp;quot;1*0+5&amp;quot;,&amp;quot;10-5&amp;quot;]
&amp;quot;00&amp;quot;, 0 -&amp;gt; [&amp;quot;0+0&amp;quot;, &amp;quot;0-0&amp;quot;, &amp;quot;0*0&amp;quot;]
&amp;quot;3456237490&amp;quot;, 9191 -&amp;gt; []
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;p&gt;This problem has a lot of edge cases to be considered:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;overflow: we use a long type once it is larger than Integer.MAX_VALUE or minimum, we get over it.&lt;/li&gt;
&lt;li&gt;0 sequence: because we can&amp;rsquo;t have numbers with multiple digits started with zero, we have to deal with it too.&lt;/li&gt;
&lt;li&gt;a little trick is that we should save the value that is to be multiplied in the next recursion.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Solution {

    public List&amp;lt;String&amp;gt; addOperators(String num, int target) {
        List&amp;lt;String&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();
        helper(res, &amp;quot;&amp;quot;, num, 0, target, 0L, 0L);
        return res;
    }
    
    private void helper(List&amp;lt;String&amp;gt; res, String cur, String num, int idx, int target, long preVal, long nextVal) {
       if(idx == num.length()) {
            if(preVal == target)
                res.add(new String(cur));
            return;
       }
       
       for(int i = idx; i &amp;lt; num.length(); i++) {
           if(i != idx &amp;amp;&amp;amp; num.charAt(idx) == &#39;0&#39;) break;
           String sbstr = num.substring(idx, i+1);
           long curVal = Long.parseLong(sbstr);
           if(idx == 0)
                helper(res, sbstr, num, i+1, target, curVal, curVal);
           else {
               helper(res, cur + &amp;quot;+&amp;quot; + curVal, num, i+1, target, preVal + curVal,  curVal);
               helper(res, cur + &amp;quot;-&amp;quot; + curVal, num, i+1, target, preVal - curVal, 0 - curVal);
               helper(res, cur + &amp;quot;*&amp;quot; + curVal, num, i+1, target, preVal - nextVal + nextVal * curVal, nextVal * curVal);
           }
       }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Flip Game I/II</title>
      <link>http://xmxiaohuilin.github.io/2015/11/11/flip-game-i/ii/</link>
      <pubDate>Wed, 11 Nov 2015 12:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/11/flip-game-i/ii/</guid>
      <description>

&lt;p&gt;You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, you and your friend take turns to flip two &lt;strong&gt;consecutive&lt;/strong&gt; &lt;code&gt;&amp;quot;++&amp;quot;&lt;/code&gt; into &lt;code&gt;&amp;quot;--&amp;quot;&lt;/code&gt;. The game ends when a person can no longer make a move and therefore the other person will be the winner.
Write a function to compute all possible states of the string after one valid move.&lt;/p&gt;

&lt;p&gt;For example, given &lt;code&gt;s = &amp;quot;++++&amp;quot;&lt;/code&gt;, after one move, it may become one of the following states:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
  &amp;quot;--++&amp;quot;,
  &amp;quot;+--+&amp;quot;,
  &amp;quot;++--&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If there is no valid move, return an empty list &lt;code&gt;[]&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;think&#34;&gt;Think&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Only consecutive &lt;code&gt;&amp;quot;++&amp;quot;&lt;/code&gt; can be flipped.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public List&amp;lt;String&amp;gt; generatePossibleNextMoves(String s) {
		List&amp;lt;String&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();
		if (s == null || s.length() &amp;lt; 2) {
            return res;
        }
		for (int i = 1; i &amp;lt; s.length(); i++) {
			StringBuilder sb = new StringBuilder(s);
			if (s.charAt(i) == &#39;+&#39; &amp;amp;&amp;amp; s.charAt(i - 1) == s.charAt(i)) {
				sb.insert(i - 1, &#39;-&#39;);
				sb.insert(i, &#39;-&#39;);
			}
			res.add(sb.toString());
		}
		return res;
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;problem-ii&#34;&gt;Problem II&lt;/h2&gt;

&lt;p&gt;You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, you and your friend take turns to flip two &lt;strong&gt;consecutive&lt;/strong&gt; &lt;code&gt;&amp;quot;++&amp;quot;&lt;/code&gt; into &lt;code&gt;&amp;quot;--&amp;quot;&lt;/code&gt;. The game ends when a person can no longer make a move and therefore the other person will be the winner.&lt;/p&gt;

&lt;p&gt;Write a function to determine if the starting player can guarantee a win.&lt;/p&gt;

&lt;p&gt;For example, given &lt;code&gt;s = &amp;quot;++++&amp;quot;&lt;/code&gt;, return true. The starting player can guarantee a win by flipping the middle &lt;code&gt;&amp;quot;++&amp;quot;&lt;/code&gt; to become &lt;code&gt;&amp;quot;+--+&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;follow&#34;&gt;Follow&lt;/h4&gt;

&lt;p&gt;Derive your algorithm&amp;rsquo;s run-time complexity.&lt;/p&gt;

&lt;h3 id=&#34;think-1&#34;&gt;Think&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Backtracking seems to be the only feasible solution to this problem.&lt;/li&gt;
&lt;li&gt;We can basically try every possible move for the first player (P1), and recursively check if the second player has any chance to win.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;solution-1&#34;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;	public static boolean canWin(String s) {
		return winHelper(s.toCharArray());
	}

	private static boolean winHelper(char[] chars) {
		for (int i = 1; i &amp;lt; chars.length; i++) {
			if (chars[i] == &#39;+&#39; &amp;amp;&amp;amp; chars[i] == chars[i - 1]) {
				chars[i - 1] = &#39;-&#39;;
				chars[i] = &#39;-&#39;;
			// if sencond player have chance to win
				boolean win = !winHelper(chars);
				chars[i - 1] = &#39;+&#39;;
				chars[i] = &#39;+&#39;;
				if (win) 
                    return true;
			}
		}
		return false;
	}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Strobogrammatic Number</title>
      <link>http://xmxiaohuilin.github.io/2015/11/08/strobogrammatic-number/</link>
      <pubDate>Sun, 08 Nov 2015 22:10:29 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/08/strobogrammatic-number/</guid>
      <description>

&lt;p&gt;A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).&lt;/p&gt;

&lt;h2 id=&#34;problem-i&#34;&gt;Problem I&lt;/h2&gt;

&lt;p&gt;Write a function to determine if a number is strobogrammatic. The number is represented as a string.&lt;/p&gt;

&lt;p&gt;For example, the numbers &lt;code&gt;&amp;quot;69&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;88&amp;quot;&lt;/code&gt;, and &lt;code&gt;&amp;quot;818&amp;quot;&lt;/code&gt; are all strobogrammatic.&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Strobogrammatic {
	public boolean isStrobogrammatic(String num) {
		if (num == null || num.length() == 0)
			return true;
		int l = 0, r = num.length() - 1;
		while (l &amp;lt; r) {
			if (isEqual(num.charAt(l), num.charAt(r))) {
				l++;
				r--;
			} else
				return false;
		}
		return true;
	}

	private boolean isEqual(char l, char r) {
		if ((l == &#39;9&#39; &amp;amp;&amp;amp; r == &#39;6&#39;) || (l == &#39;6&#39; &amp;amp;&amp;amp; r == &#39;9&#39;)
				|| (l == &#39;1&#39; &amp;amp;&amp;amp; r == &#39;1&#39;) || (l == &#39;8&#39; &amp;amp;&amp;amp; r == &#39;8&#39;)
				|| (l == &#39;0&#39; &amp;amp;&amp;amp; r == &#39;0&#39;))
			return true;
		else
			return false;
	}
	
    // Use HashMap
	public boolean isStrobogrammatic(String num) {
        if(num == null || num.length() == 0) {
            return true;
        }
         
        Map&amp;lt;Character, Character&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
        map.put(&#39;0&#39;, &#39;0&#39;);
        map.put(&#39;1&#39;, &#39;1&#39;);
        map.put(&#39;8&#39;, &#39;8&#39;);
        map.put(&#39;6&#39;, &#39;9&#39;);
        map.put(&#39;9&#39;, &#39;6&#39;);
         
        int lo = 0;
        int hi = num.length() - 1;
         
        while (lo &amp;lt;= hi) {
            char c1 = num.charAt(lo);
            char c2 = num.charAt(hi);
             
            if (!map.containsKey(c1) || map.get(c1) != c2) {
                return false;
            }
             
            lo++;
            hi--;
        }
         
        return true;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;problem-ii&#34;&gt;Problem II&lt;/h2&gt;

&lt;p&gt;A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down). Find all strobogrammatic numbers that are of length = n.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example,&lt;/h3&gt;

&lt;p&gt;Given n = 2, return &lt;code&gt;[&amp;quot;11&amp;quot;,&amp;quot;69&amp;quot;,&amp;quot;88&amp;quot;,&amp;quot;96&amp;quot;]&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;think&#34;&gt;Think&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Typical backtracking to generate something question&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;solution-1&#34;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;	public static List&amp;lt;String&amp;gt; findStrobogrammatic(int n) {
        Map&amp;lt;Character, Character&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
        map.put(&#39;0&#39;, &#39;0&#39;);
        map.put(&#39;1&#39;, &#39;1&#39;);
        map.put(&#39;8&#39;, &#39;8&#39;);
        map.put(&#39;6&#39;, &#39;9&#39;);
        map.put(&#39;9&#39;, &#39;6&#39;);
        List&amp;lt;String&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();
        // two cases: even or odd
        if(n%2==0)
        		generate(res, map, &amp;quot;&amp;quot;, n);
        else{
            // the central digit can be any number
        	for(int i = 0; i &amp;lt;= 9; i++)
        		generate(res, map, &amp;quot;&amp;quot;+i, n);
        }
        return res;
	}
	
	private static void generate(List&amp;lt;String&amp;gt; res, Map&amp;lt;Character, Character&amp;gt; map, String cur, int n) {
		if(cur.length() == n) {
			res.add(new String(cur));
			return;
		}
		
		for(Map.Entry&amp;lt;Character, Character&amp;gt; entry : map.entrySet()) {
			String origin = new String(cur);
			cur = entry.getKey() + cur + entry.getValue();
			generate(res, map, cur, n);
			cur = origin;
		}
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;problem-iii&#34;&gt;Problem III&lt;/h2&gt;

&lt;p&gt;A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).&lt;/p&gt;

&lt;p&gt;Write a function to count the total strobogrammatic numbers that exist in the range of low &amp;lt;= num &amp;lt;= high.&lt;/p&gt;

&lt;h3 id=&#34;example-1&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Given low = &amp;ldquo;50&amp;rdquo;, high = &amp;ldquo;100&amp;rdquo;, return 3. Because 69, 88, and 96 are three strobogrammatic numbers.&lt;/p&gt;

&lt;h3 id=&#34;note&#34;&gt;Note&lt;/h3&gt;

&lt;p&gt;Because the range might be a large number, the low and high numbers are represented as string.&lt;/p&gt;

&lt;h3 id=&#34;solution-2&#34;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static int strobogrammaticInRange(String low, String high) {
		Map&amp;lt;Character, Character&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
		map.put(&#39;0&#39;, &#39;0&#39;);
		map.put(&#39;1&#39;, &#39;1&#39;);
		map.put(&#39;8&#39;, &#39;8&#39;);
		map.put(&#39;6&#39;, &#39;9&#39;);
		map.put(&#39;9&#39;, &#39;6&#39;);
		int[] cnt = new int[1];
		for (int n = low.length(); n &amp;lt;= high.length(); n++) {
			if (n % 2 == 0)
				generateII(cnt, map, &amp;quot;&amp;quot;, n, low, high);
			else {
				for (int i = 0; i &amp;lt;= 9; i++)
					generateII(cnt, map, &amp;quot;&amp;quot; + i, n, low, high);
			}
		}
		return cnt[0];
	}

	private static void generateII(int[] cnt,
			Map&amp;lt;Character, Character&amp;gt; map, String cur, int n, String low,
			String high) {
		if (cur.length() == n) {
			if (cur.charAt(0) != &#39;0&#39; &amp;amp;&amp;amp; compare(low, cur) &amp;lt; 0
					&amp;amp;&amp;amp; compare(cur, high) &amp;lt; 0)
				cnt[0]++;
			return;
		}

		for (Map.Entry&amp;lt;Character, Character&amp;gt; entry : map.entrySet()) {
			String origin = new String(cur);
			cur = entry.getKey() + cur + entry.getValue();
			generateII(cnt, map, cur, n, low, high);
			cur = origin;
		}
	}

	private static int compare(String s1, String s2) {
		return Integer.compare(Integer.parseInt(s1), Integer.parseInt(s2));
	}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Scramble Number Pair Calculator</title>
      <link>http://xmxiaohuilin.github.io/2015/10/29/scramble-number-pair-calculator/</link>
      <pubDate>Thu, 29 Oct 2015 15:14:18 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/10/29/scramble-number-pair-calculator/</guid>
      <description>

&lt;p&gt;Let a pair of distinct positive integers, (i, j), be considered &amp;ldquo;scrambled&amp;rdquo; if you can obtain j by reordering the digits of i.  For example, (12345, 25341) is a scrambled pair, but (12345, 67890) is not.&lt;/p&gt;

&lt;p&gt;Given integers A and B with the same number of digits and no leading zeroes, how many distinct scrambled pairs (i, j) are there that satisfy: A &amp;lt;= i &amp;lt; j &amp;lt;= B?&lt;/p&gt;

&lt;p&gt;For instance, if we let A = 10 and B = 99, the answer is 36:
(12,21), (13,31), (14,41), (15,51), (16,61), (17,71), (18,81), (19,91), (23,32), (24,42), (25,52), (26,62), (27,72), (28,82), (29,92), (34,43), (35,53), (36,63), (37,73), (38,83), (39,93), (45,54), (46,64), (47,74), (48,84), (49,94), (56,65), (57,75), (58,85), (59,95), (67,76), (68,86), (69,96), (78,87), (79,97), (89,98)&lt;/p&gt;

&lt;h2 id=&#34;think-and-solution&#34;&gt;Think and Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Test {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println(&amp;quot;Input min range: &amp;quot;);
        int min = scanner.nextInt();
        System.out.println(&amp;quot;Input max range: &amp;quot;);
        int max = scanner.nextInt();
        System.out.print(scrambleNumberCalculator(min, max));
        Map&amp;lt;Object,Object&amp;gt;  map = new HashMap();
        
    }
    
    /**
     * Main function to do the scramble number pair calculation
     * @param minRange  : minimum of range 
     * @param maxRange : maximum of range
     * @return
     */
    public  static long scrambleNumberCalculator(int min, int max) {
        // the total scramble number set to avoid duplicate calculate
        Set&amp;lt;Integer&amp;gt; pairs = new HashSet&amp;lt;&amp;gt;();
                
        // the result of pairs count;
        long cnt = 0;   
        int[] range = new int[]{min, max};
        for (int i = range[0]; i &amp;lt;= range[1]; i++) {
            if (pairs.contains(i))
                continue;
            Set&amp;lt;Integer&amp;gt; res = new HashSet&amp;lt;&amp;gt;();
            List&amp;lt;Integer&amp;gt; list = convertDigitsList(i);
            permutation(res, list, range, 0, list.size());          
            cnt += combinationPair(res.size());
            // res size equal to one means there is no pair for this number
            // for saving pairs space I don&#39;t add the number with no scramble pair.
            if(res.size() &amp;gt; 1)
                pairs.addAll(res);
        }
        // System.out.println(pairs);
        return cnt;
    }
    
    /**
     * The function to check current number has how many scramble number and store it in a set,
     * recursion without return value but values are recorded in permutation set
     * 
     * @param res: the permutation result storage as a set
     * @param digits: the current number digits for permutation 
     * @param range: the range of output val
     * @param cur: current permutation value
     * @param idx: current permutation index for digits list
     */
    private static void permutation(Set&amp;lt;Integer&amp;gt; res, List&amp;lt;Integer&amp;gt; digits, int[] range,
            int cur, int idx) {
        if (idx == 0) {
            if (cur &amp;gt;= range[0] &amp;amp;&amp;amp; cur &amp;lt;= range[1])
                res.add(cur);
            return;
        }
        for (int i = 0; i &amp;lt; digits.size(); i++) {
            // avoid the zero leading number
            if (cur == 0 &amp;amp;&amp;amp; digits.get(i) == 0)
                continue;
            cur = cur * 10 + digits.get(i);
            digits.remove(i);
            permutation(res, digits, range, cur, idx - 1);
            digits.add(i, cur % 10);
            cur /= 10;
        }
    }

    /**
     * The function to count the pair amount in permutation set by just using the size of current scramble number set
     * @param num: consider the large input I use long type here
     * @return the amount of pair in current permutation set
     */
    private static long combinationPair(long num) {
        long pairCnt = 0;
        for (int i = 0; i &amp;lt; num - 1; i++)
            for (int j = i + 1; j &amp;lt; num; j++)
                pairCnt++;
        return pairCnt;
    }

    /**
     * The function to convert a number into a list with digits make the permutation more convenient
     * @param num
     * @return
     */
    private static List&amp;lt;Integer&amp;gt; convertDigitsList(int num) {
        List&amp;lt;Integer&amp;gt; res = new LinkedList&amp;lt;&amp;gt;();
        while (num &amp;gt; 0) {
            res.add(0, num % 10);
            num /= 10;
        }
        return res;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>k Sum II</title>
      <link>http://xmxiaohuilin.github.io/2015/10/22/k-sum-ii/</link>
      <pubDate>Thu, 22 Oct 2015 15:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/10/22/k-sum-ii/</guid>
      <description>

&lt;p&gt;Given n unique integers, number k (1&amp;lt;=k&amp;lt;=n)  and target. Find all possible k integers where their sum is target.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Given [1,2,3,4], k=2, target=5, [1,4] and [2,3] are possible solutions.&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;p&gt;Unlike the k Sum I, here we need to get the each solution which can achieve the &lt;code&gt;target&lt;/code&gt; within &lt;code&gt;k&lt;/code&gt; num. Since the solution should be shown in the result, the dynamic programming cannot be used. Thus, the backtracking should be the only way.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    /**
     * @param A: an integer array.
     * @param k: a positive integer (k &amp;lt;= length(A))
     * @param target: a integer
     * @return a list of lists of integer 
     */ 
    public ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; kSumII(int A[], int k, int target) {
        ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();
        helper(res, new ArrayList&amp;lt;Integer&amp;gt;(), A , k, target, 0);
        return res;
    }
    
    private void helper(ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; res, ArrayList&amp;lt;Integer&amp;gt; cur, int[] A, int k, int target, int idx) {
        if(target &amp;lt; 0 || k &amp;lt; 0)
            return;
            
        if(target == 0 &amp;amp;&amp;amp; k == 0) {
            res.add(new ArrayList&amp;lt;&amp;gt;(cur));
            return;
        }
        
        for(int i = idx; i &amp;lt; A.length; i++) {
            cur.add(A[i]);
            helper(res, cur, A, k - 1, target - A[i], i + 1);
            cur.remove(cur.size() - 1);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>