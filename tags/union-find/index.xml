<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Union Find on Cindy&#39;s Blog</title>
    <link>http://xmxiaohuilin.github.io/tags/union-find/</link>
    <description>Recent content in Union Find on Cindy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015 Cindy Lin.</copyright>
    <lastBuildDate>Tue, 20 Oct 2015 16:13:13 -0700</lastBuildDate>
    <atom:link href="http://xmxiaohuilin.github.io/tags/union-find/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Find the Weak Connected Component in the Directed Graph</title>
      <link>http://xmxiaohuilin.github.io/2015/10/20/find-the-weak-connected-component-in-the-directed-graph/</link>
      <pubDate>Tue, 20 Oct 2015 16:13:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/10/20/find-the-weak-connected-component-in-the-directed-graph/</guid>
      <description>

&lt;p&gt;Find the number Weak Connected Component in the directed graph. Each node in the graph contains a label and a list of its neighbors. (a connected set of a directed graph is a subgraph in which any two vertices are connected by direct edge path.)&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Given graph:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A-----&amp;gt;B  C
 \     |  | 
  \    |  |
   \   |  |
    \  v  v
     -&amp;gt;D  E &amp;lt;- F
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Return &lt;code&gt;{A,B,D}&lt;/code&gt;, &lt;code&gt;{C,E,F}&lt;/code&gt;. Since there are two connected component which are &lt;code&gt;{A,B,D}&lt;/code&gt; and &lt;code&gt;{C,E,F}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;note&#34;&gt;Note&lt;/h3&gt;

&lt;p&gt;Sort the element in the set in increasing order&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Union Find
```
class UnionFind{
	// child - parent pair table:
	HashMap&lt;Integer, Integer&gt; pairTab;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;	public UnionFind(HashSet&lt;Integer&gt; set) {
		pairTab = new HashMap&amp;lt;&amp;gt;();
		for(Integer i : set)
			pairTab.put(i, i);
	}&lt;/p&gt;

&lt;p&gt;	public int find(int x) {
		int parent = pairTab.get(x);
		while(parent != pairTab.get(parent)){
			parent = pairTab.get(parent);
		}
		return parent;
	}&lt;/p&gt;

&lt;p&gt;	public void union(int x, int y) {
		int parent_x = find(x);
		int parent_y = find(y);
		if(parent_x != parent_y)
			pairTab.put(parent_x, parent_y);
	}
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
## Solution

```java
public class Solution {
    /**
     * @param nodes a array of Directed graph node
     * @return a connected set of a directed graph
     */
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; connectedSet2(ArrayList&amp;lt;DirectedGraphNode&amp;gt; nodes) {
        
        HashSet&amp;lt;Integer&amp;gt; set = new HashSet&amp;lt;&amp;gt;();
        for(DirectedGraphNode node : nodes) 
            set.add(node.label);
        
        // to make union
        UnionFind uf = new UnionFind(set);
        for(DirectedGraphNode x : nodes) {
            for(DirectedGraphNode y : x.neighbors) {
                uf.union(x.label, y.label);
            }
        }
        
        HashMap&amp;lt;Integer, ArrayList&amp;lt;Integer&amp;gt;&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
        for(Integer label : set) {
            int parent = uf.find(label);
            if(!map.containsKey(parent)) 
                map.put(parent, new ArrayList&amp;lt;Integer&amp;gt;());
            ArrayList&amp;lt;Integer&amp;gt; cur = map.get(parent);
            cur.add(label);
            map.put(parent, cur);
        }
        
        List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res = new ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;();
        for(Map.Entry&amp;lt;Integer, ArrayList&amp;lt;Integer&amp;gt;&amp;gt; entry : map.entrySet()) {
            Collections.sort(entry.getValue());
            res.add(entry.getValue());
        }
        return res;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>