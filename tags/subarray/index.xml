<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Subarray on Cindy&#39;s Blog</title>
    <link>http://xmxiaohuilin.github.io/tags/subarray/</link>
    <description>Recent content in Subarray on Cindy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015 Cindy Lin.</copyright>
    <lastBuildDate>Wed, 18 Nov 2015 11:43:13 -0700</lastBuildDate>
    <atom:link href="http://xmxiaohuilin.github.io/tags/subarray/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Windows Sum</title>
      <link>http://xmxiaohuilin.github.io/2015/11/18/windows-sum/</link>
      <pubDate>Wed, 18 Nov 2015 11:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/18/windows-sum/</guid>
      <description>

&lt;p&gt;Given a list of integers and a window size, return a new list of integers where each integer is the sum of all integers in the kth window of of input list. The kth window of the input list is the integers from index k to index k + windows size - 1 (inclusive).&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;[4, 2, 73, 11, -5]&lt;/code&gt; and windows size &lt;code&gt;2&lt;/code&gt; should return &lt;code&gt;[6, 75, 84, 6]&lt;/code&gt;, if windows size &lt;code&gt;3&lt;/code&gt; should return &lt;code&gt;[79, 86, 79]&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;solution-array-version&#34;&gt;Solution #Array Version&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public int[] windowsSum(int[] arr, int wSize) {
		int[] res = new int[arr.length - wSize + 1];
		int curSum = 0;
		int idx = 0;
		int resIdx = 0;
		while(idx &amp;lt; arr.length) {
			curSum += arr[idx];
			if(idx &amp;gt;= wSize - 1) {
				res[resIdx++] = curSum;
				curSum -= arr[idx - wSize + 1];
			}
			idx++;
		}
		return res;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-arraylist-version&#34;&gt;Solution #ArrayList Version&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public List&amp;lt;Integer&amp;gt; windowsSum(List&amp;lt;Integer&amp;gt; arr, int wSize) {
	    if(arr == null || arr.size() &amp;lt; wSize)
			return new ArrayList&amp;lt;&amp;gt;();

		List&amp;lt;Integer&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();
		int curSum = 0; // count current sum
		int idx = 0; // index pointer for res array
		for(int i = 0; i &amp;lt; arr.size(); i++) {
			curSum += arr.get(i);
			if(i + 1 &amp;gt;= wSize) {
				res.add(curSum); // write current sum on the res array
				curSum -= arr.get(idx++); // reduce the prev number out of windows
			} 
		}
		return res;
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Subarray Sum I</title>
      <link>http://xmxiaohuilin.github.io/2015/09/09/subarray-sum-i/</link>
      <pubDate>Wed, 09 Sep 2015 10:40:49 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/09/09/subarray-sum-i/</guid>
      <description>&lt;p&gt;Given an integer array, find a subarray where the sum of numbers is zero. Your code should return the index of the first number and the index of the last number.&lt;/p&gt;

&lt;pre&gt;
    &lt;code class=&#34;java&#34;&gt;
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number 
     *          and the index of the last number
     */
    public ArrayList&lt;Integer&gt; subarraySum(int[] nums) {
        // write your code here
        ArrayList&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();
        if(nums == null || nums.length == 0)
            return res;       
        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;Integer&gt;();
        int sum = 0;
        map.put(0, 0);
        for(int i = 0; i &lt; nums.length; i++) {
            if(map.containsKey(sum+nums[i])) {
                res.add(map.get(sum+nums[i]));
                res.add(i);
                return res;
            }
            map.put(sum+=nums[i], i+1);
        }
        return res;
    }
}   

&lt;/code&gt;

&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Subarray Sum II</title>
      <link>http://xmxiaohuilin.github.io/2015/09/08/subarray-sum-ii/</link>
      <pubDate>Tue, 08 Sep 2015 21:18:09 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/09/08/subarray-sum-ii/</guid>
      <description>&lt;p&gt;Given an integer array, find a subarray where the sum of numbers is between two given interval. Your code should return the number of possible answer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
public int subarraySumII(int[] A, int start, int end) {
    int res = 0;
        for(int i = 1; i &lt; A.length; i++)
            A[i] += A[i - 1];
        
        Arrays.sort(A);
        for(int i = 0; i &lt; A.length; i++) {
            if(A[i] &gt;= start &amp;&amp; A[i] &lt;= end)
                res++;
            // start &lt;= A[i] - A[j] &lt;= end
            // so the max bound and min bound of A[j] are following:
            int max = A[i] - start;
            int min = A[i] - end;
            // max + 1 make sure the right bound of max value and also index problem
            int range = findInsPos(A, max + 1) - findInsPos(A, min);
            res += range;
        }
        return res;
}
private int findInsPos(int[] A, int value) {
        int l = 0, r = A.length - 1;
        
        while(l &lt; r - 1) {
            int m = l + ((r - l) &gt;&gt;1);
            if(A[m] &lt; value)
                l = m;
            else
                r = m;
        }
        if(A[l] &gt;= value)
            return l;
        else
            return r;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>