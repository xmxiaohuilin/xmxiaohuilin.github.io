<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Binary Tree on Cindy&#39;s Blog</title>
    <link>http://xmxiaohuilin.github.io/tags/binary-tree/</link>
    <description>Recent content in Binary Tree on Cindy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015 Cindy Lin.</copyright>
    <lastBuildDate>Thu, 19 Nov 2015 10:23:13 -0700</lastBuildDate>
    <atom:link href="http://xmxiaohuilin.github.io/tags/binary-tree/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Find Minimum Value Sum of Path</title>
      <link>http://xmxiaohuilin.github.io/2015/11/19/find-minimum-value-sum-of-path/</link>
      <pubDate>Thu, 19 Nov 2015 10:23:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/19/find-minimum-value-sum-of-path/</guid>
      <description>

&lt;p&gt;Given a binary tree, find a path has the minimum sum of node value.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public static int minPath(TreeNode root) {
		if (root == null)
			return 0;
		if (root.left == null &amp;amp;&amp;amp; root.right == null)
			return root.val;
		if (root.left == null)
			return root.val + minPath(root.right);
		if (root.right == null)
			return root.val + minPath(root.left);
		return root.val + Math.min(minPath(root.left), minPath(root.right));
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Amplitude of Tree</title>
      <link>http://xmxiaohuilin.github.io/2015/11/18/amplitude-of-tree/</link>
      <pubDate>Wed, 18 Nov 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/18/amplitude-of-tree/</guid>
      <description>

&lt;p&gt;Given a tree of N nodes, return the amplitude of the tree. In a binary tree T, a path P is a non-empty sequence of nodes of tree such that, each consecutive node in the sequence is a subtree of its preceding node. In the example tree, the sequences &lt;code&gt;[9, 8, 2]&lt;/code&gt; and &lt;code&gt;[5, 8, 12]&lt;/code&gt; are two paths, while &lt;code&gt;[12, 8, 2]&lt;/code&gt; is not. The amplitude of path P is the maximum difference among values of nodes on path P. The amplitude of tree T is the maximum amplitude of all paths in T. When the tree is empty, it contains no path, and its amplitude is treated as 0.&lt;/p&gt;

&lt;h3 id=&#34;exmaple&#34;&gt;Exmaple&lt;/h3&gt;

&lt;p&gt;Input:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;         5
       /   \
    8        9
   /  \     /  \ 
  12   2   8    4
          /    /
        2    5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output: &lt;code&gt;7&lt;/code&gt; since there are paths &lt;code&gt;[5, 8, 12]&lt;/code&gt; and &lt;code&gt;[9, 8, 2]&lt;/code&gt; have the maximum amplitude &lt;code&gt;7&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Recursion, record the max value and min value a certain path.&lt;/li&gt;
&lt;li&gt;And recursively check each node on the path to that leaf and there differences.&lt;/li&gt;
&lt;li&gt;Set a global variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
    public static int treeAmplitude(TreeNode root) {
        if (root == null)
            return 0;
        // setup an array to record [0] minimum in a certain path,
        // [1] maximum in a certain path, [2] the global maximum difference in
        // tree
        int[] mx = new int[1];
        List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
        list.add(Integer.MIN_VALUE);
        list.add(Integer.MAX_VALUE);
        recursionHelper(root, list, mx);
        return mx[0];
    }

    /**
     * @param node
     *            - current root node in tree
     * @param prev
     *            - record the minimum and maximum value in current path
     * @param mx
     *            - record global maximum amplitude
     **/
    private static void recursionHelper(TreeNode node, List&amp;lt;Integer&amp;gt; prev,
            int[] mx) {
        // update the min or max in current path
        List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
        list.add(Math.max(prev.get(0), node.val));
        list.add(Math.min(prev.get(1), node.val));
        // once find the leaf node terminate the recursion
        // and caculate current amplitude in this path
        if (node.left == null &amp;amp;&amp;amp; node.right == null) {
            int diff = list.get(0) - list.get(1);
            mx[0] = Math.max(mx[0], diff);
            return;
        }
        // check each child node if existed
        if (node.left != null)
            recursionHelper(node.left, list, mx);
        if (node.right != null)
            recursionHelper(node.right, list, mx);
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Is Subtree</title>
      <link>http://xmxiaohuilin.github.io/2015/11/17/is-subtree/</link>
      <pubDate>Tue, 17 Nov 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/17/is-subtree/</guid>
      <description>

&lt;p&gt;Given a tree root node and another root node of tree, check if another tree is the subtree of the given tree.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
    
    public boolean isSubtree(TreeNode root, TreeNode node) {
        if(node  == null)
            return true;
        if(root == null)
            return false;
        // check if currende node can build a same tree, or  recursively check the child node is that subtree
        return checkNodes(root, node) || isSubtree(root.left, node) ||isSubtree(root.right, node);
    }

    /** Check two trees are the same
    * @param: treenode - the root node of one partial tree
    * @param: treenode - the root node of another tree
    * @return: boolean - if two trees are the same 
    */
    private boolean checkNodes(TreeNode r1, TreeNode r2) {
        if(r1 == null &amp;amp;&amp;amp; r2  == null)
            return true;
        if(r1 == null || r2 == null)
            return false;
        return (r1.val == r2.val) &amp;amp;&amp;amp; checkNodes(r1.left, r2.left) &amp;amp;&amp;amp; chechNodes(r1.right, r2.right);
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Binary Tree Upside Down</title>
      <link>http://xmxiaohuilin.github.io/2015/11/14/binary-tree-upside-down/</link>
      <pubDate>Sat, 14 Nov 2015 15:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/14/binary-tree-upside-down/</guid>
      <description>

&lt;p&gt;Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty, flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Given a binary tree &lt;code&gt;{1,2,3,4,5}&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     1
    / \
   2   3
  / \
 4   5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;return the root of the binary tree &lt;code&gt;[4,5,2,#,#,3,1]&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     4
    / \
   5   2
      / \
     3   1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Mark the parent node &lt;code&gt;parent&lt;/code&gt; from next right node position.&lt;/li&gt;
&lt;li&gt;Mark the current right child &lt;code&gt;node.right&lt;/code&gt; from next left &lt;code&gt;left&lt;/code&gt; node position&lt;/li&gt;
&lt;li&gt;Mark the next iteration node &lt;code&gt;next&lt;/code&gt; by current left child &lt;code&gt;node.left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replace the current node&amp;rsquo;s left child as the recorded &lt;code&gt;right&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Replace the current node&amp;rsquo;s right child as the recorded &lt;code&gt;parent&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Replace current iteration node by &lt;code&gt;next&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution-iterative&#34;&gt;Solution #Iterative&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public TreeNode UpsideDownBinaryTree(TreeNode node) {  
        TreeNode parent = null, right = null;
		while(node != null) {
			TreeNode next = node.left;
			node.left = right;						
			right = node.right;
			node.right = parent;
			parent = node;
			node = next;
		}
		return parent;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-recursive&#34;&gt;Solution #Recursive&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public static TreeNode upsideDown(TreeNode node) {
        if(node == null)
            return node;
        TreeNode root = node, left = node.left, right = node.right;
        if(left != null) {
            TreeNode newroot = upsideDown(node.left);
            left.left = right;
            left.right = root;
            return newroot;
        }
        return node;
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Longest Consecutive Sequence in Binary Tree</title>
      <link>http://xmxiaohuilin.github.io/2015/11/10/longest-consecutive-sequence-in-binary-tree/</link>
      <pubDate>Tue, 10 Nov 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/10/longest-consecutive-sequence-in-binary-tree/</guid>
      <description>

&lt;p&gt;Given a binary tree, find the length of the longest consecutive sequence path.&lt;/p&gt;

&lt;p&gt;The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;   1
    \
     3
    / \
   2   4
        \
         5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Longest consecutive sequence path is &lt;code&gt;3-4-5&lt;/code&gt;, so return &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   2
    \
     3
    / 
   2    
  / 
 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Longest consecutive sequence path is &lt;code&gt;2-3&lt;/code&gt;, not &lt;code&gt;3-2-1&lt;/code&gt;, so return &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Simple recursion way&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class LCSinBT {
    int maxLength = 1;

    public int longestConsecutive(TreeNode root) {
        if(root == null)
            return 0;
        helper(root, 1);
        return maxLength;
    }

    private void helper(TreeNode node, int length) {
        if (node.left == null &amp;amp;&amp;amp; node.right == null) {
            maxLength = Math.max(length, maxLength);
            return;
        }

        if (node.left != null &amp;amp;&amp;amp; node.left.val == node.val + 1)
            helper(node.left, length + 1);
        if (node.right != null &amp;amp;&amp;amp; node.right.val == node.val + 1)
            helper(node.right, length + 1);
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Serialize and Deserialize Binary Tree</title>
      <link>http://xmxiaohuilin.github.io/2015/11/10/serialize-and-deserialize-binary-tree/</link>
      <pubDate>Tue, 10 Nov 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/10/serialize-and-deserialize-binary-tree/</guid>
      <description>

&lt;p&gt;Design an algorithm and write code to serialize and deserialize a binary tree. Writing the tree to a file is called &amp;lsquo;serialization&amp;rsquo; and reading back from the file to reconstruct the exact same binary tree is &amp;lsquo;deserialization&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;There is no limit of how you deserialize or serialize a binary tree, you only need to make sure you can serialize a binary tree to a string and deserialize this string to the original structure.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;An example of testdata: Binary tree &lt;code&gt;{3,9,20,#,#,15,7}&lt;/code&gt;, denote the following structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  3
 / \
9  20
  /  \
 15   7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our data serialization use bfs traversal. This is just for when you got wrong answer and want to debug the input.&lt;/p&gt;

&lt;p&gt;You can use other method to do serializaiton and deserialization.&lt;/p&gt;

&lt;h2 id=&#34;think-multiple-ways&#34;&gt;Think #Multiple Ways&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;BFS with queue&lt;/li&gt;
&lt;li&gt;Preorder or inorder&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution-preorder&#34;&gt;Solution # Preorder&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Solution {
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        preorder(sb, root);
        return sb.toString();
    }    
    private void preorder(StringBuilder sb, TreeNode node) {
        if(node == null) {
            sb.append(&amp;quot;#,&amp;quot;);
            return;
        }
        sb.append(node.val + &amp;quot;,&amp;quot;);
        preorder(sb, node.left);
        preorder(sb, node.right);
    }    
    public TreeNode deserialize(String data) {
        String[] datas = data.split(&amp;quot;,&amp;quot;);
        return helper(datas, new int[]{0});
    }    
    private TreeNode helper(String[] datas, int[] idx) {
        String cur = datas[idx[0]++];
        if(cur.equals(&amp;quot;#&amp;quot;)) 
            return null;
        TreeNode root = new TreeNode(Integer.parseInt(cur));
        root.left = helper(datas, idx);
        root.right = helper(datas, idx);
        return root;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-bfs-level-order&#34;&gt;Solution #BFS(Level order)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Solution {
    /**
     * This method will be invoked first, you should design your own algorithm 
     * to serialize a binary tree which denote by a root node to a string which
     * can be easily deserialized by your own &amp;quot;deserialize&amp;quot; method later.
     */
    public String serialize(TreeNode root) {
        if (root == null)
            return &amp;quot;#&amp;quot;;
        
        // write your code here
        StringBuilder sb = new StringBuilder();
        Queue&amp;lt;TreeNode&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;();
        queue.offer(root);
        while(!queue.isEmpty()) {
            TreeNode node = queue.remove();
            if(node == null) {
                sb.append(&amp;quot;#,&amp;quot;);
            }else {
                sb.append(node.val+&amp;quot;,&amp;quot;);
                queue.offer(node.left);
                queue.offer(node.right);
            }
        }
        sb.deleteCharAt(sb.length() - 1);
        return sb.toString();
    }
    
    /**
     * This method will be invoked second, the argument data is what exactly
     * you serialized at method &amp;quot;serialize&amp;quot;, that means the data is not given by
     * system, it&#39;s given by your own serialize method. So the format of data is
     * designed by yourself, and deserialize it here as you serialize it in 
     * &amp;quot;serialize&amp;quot; method.
     */
    public TreeNode deserialize(String data) {
        if (data == null || data.length() == 0 || data.equals(&amp;quot;#&amp;quot;))
            return null;
        // write your code here
        String[] strs = data.split(&amp;quot;,&amp;quot;);
        Queue&amp;lt;TreeNode&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;();
        queue.offer(new TreeNode(Integer.parseInt(strs[0])));
        TreeNode root = queue.peek();
        int idx = 1;
        while(idx &amp;lt; strs.length) {
            TreeNode node = queue.remove();
            node.left = strs[idx].equals(&amp;quot;#&amp;quot;)? null : new TreeNode(Integer.parseInt(strs[idx]));
            idx++;
            node.right = strs[idx].equals(&amp;quot;#&amp;quot;)? null : new TreeNode(Integer.parseInt(strs[idx]));
            idx++;
            if(node.left!=null)
                queue.offer(node.left);
            if(node.right!=null)
                queue.offer(node.right);
        }
        return root;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Closest Binary Search Tree Value</title>
      <link>http://xmxiaohuilin.github.io/2015/11/09/closest-binary-search-tree-value/</link>
      <pubDate>Mon, 09 Nov 2015 10:23:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/09/closest-binary-search-tree-value/</guid>
      <description>

&lt;p&gt;Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.&lt;/p&gt;

&lt;h2 id=&#34;problem-i&#34;&gt;Problem I&lt;/h2&gt;

&lt;h4 id=&#34;note&#34;&gt;Note&lt;/h4&gt;

&lt;p&gt;Given target value is a floating point.
You are guaranteed to have only one unique value in the BST that is closest to the target.&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class ClosestBSTValue {
	double min = Double.MAX_VALUE;
	TreeNode closest = null;

	public int closestValue(TreeNode root, double target) {
		if (root == null) {
            return Integer.MAX_VALUE;
        }
		helper(root, target);
		return closest.val;
	}

	private void helper(TreeNode node, double target) {
		if (node == null)
			return;
		if (Math.abs((double) node.val - target) &amp;lt; min) {
			min = Math.abs((double) node.val - target);
			closest = node;
		}
		
		if((double) node.val &amp;gt; target) {
			helper(node.left, target);
		}else{
			helper(node.right, target);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;problem-ii&#34;&gt;Problem II&lt;/h2&gt;

&lt;p&gt;Given a non-empty binary search tree and a target value, find &lt;strong&gt;k values&lt;/strong&gt; in the BST that are closest to the target.&lt;/p&gt;

&lt;h4 id=&#34;note-1&#34;&gt;Note&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Given target value is a floating point.&lt;/li&gt;
&lt;li&gt;You may assume &lt;code&gt;k&lt;/code&gt; is always valid, that is:&lt;code&gt;k ≤ total&lt;/code&gt; nodes.&lt;/li&gt;
&lt;li&gt;You are guaranteed to have only one unique set of &lt;code&gt;k&lt;/code&gt; values in the BST that are closest to the target.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;follow-up&#34;&gt;Follow up&lt;/h4&gt;

&lt;p&gt;Assume that the BST is balanced, could you solve it in less than $$O(n)$$ runtime (where n = total nodes)?&lt;/p&gt;

&lt;h4 id=&#34;hint&#34;&gt;Hint&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Consider implement these two helper functions:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getPredecessor(N)&lt;/code&gt;, which returns the next smaller node to N.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getSuccessor(N)&lt;/code&gt;, which returns the next larger node to N.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Try to assume that each node has a parent pointer, it makes the problem much easier.&lt;/li&gt;
&lt;li&gt;Without parent pointer we just need to keep track of the path from the root to the current node using a stack.&lt;/li&gt;
&lt;li&gt;You would need two stacks to track the path in finding predecessor and successor node separately.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;think-1&#34;&gt;Think #1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The straight-forward solution would be to use a &lt;strong&gt;heap&lt;/strong&gt;. We just treat the BST just as a usual array and do a in-order traverse. Then we compare the current element with the minimum element in the heap, the same as top k problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;solution-1&#34;&gt;Solution #1&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Solution {
    private PriorityQueue&amp;lt;Integer&amp;gt; minPQ;
    private int count = 0;
    public List&amp;lt;Integer&amp;gt; closestKValues(TreeNode root, double target, int k) {
        minPQ = new PriorityQueue&amp;lt;;Integer&amp;gt;(k);
        List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;Integer&amp;gt;();
         
        inorderTraverse(root, target, k);
         
        // Dump the pq into result list
        for (Integer elem : minPQ) {
            result.add(elem);
        }
         
        return result;
    }
     
    private void inorderTraverse(TreeNode root, double target, int k) {
        if (root == null) {
            return;
        }
         
        inorderTraverse(root.left, target, k);
         
        if (count &amp;lt; k) {
            minPQ.offer(root.val);
        } else {
            if (Math.abs((double) root.val - target) &amp;amp;lt; Math.abs((double) minPQ.peek() - target)) {
                minPQ.poll();
                minPQ.offer(root.val);
            }
        }
        count++;
         
        inorderTraverse(root.right, target, k);
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Verify Preorder Sequence in Binary Search Tree</title>
      <link>http://xmxiaohuilin.github.io/2015/11/09/verify-preorder-sequence-in-binary-search-tree/</link>
      <pubDate>Mon, 09 Nov 2015 10:23:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/09/verify-preorder-sequence-in-binary-search-tree/</guid>
      <description>

&lt;p&gt;Given an array of numbers, verify whether it is the correct preorder traversal sequence of a binary search tree.&lt;/p&gt;

&lt;p&gt;You may assume each number in the sequence is unique.&lt;/p&gt;

&lt;h3 id=&#34;follow-up&#34;&gt;Follow up&lt;/h3&gt;

&lt;p&gt;Could you do it using only constant space complexity?&lt;/p&gt;

&lt;h2 id=&#34;think-1&#34;&gt;Think #1&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The first element should be the root node.&lt;/li&gt;
&lt;li&gt;Find the bound that all previous element are small than root value by checking the first larger element.&lt;/li&gt;
&lt;li&gt;So the left of this bound should be the left tree of root, and the rest of it should be the right tree of root.&lt;/li&gt;
&lt;li&gt;Check left and right recursively.&lt;/li&gt;
&lt;li&gt;Time Complexity: $$O(n^2)$$, Space Complexity: $$O(n)$$&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution-1&#34;&gt;Solution #1&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public boolean verifyPreorder(int[] preorder) {
		if (preorder == null || preorder.length &amp;lt;= 1)
			return true;
		return helper(preorder, 0, preorder.length - 1);
	}

	private boolean helper(int[] preorder, int l, int r) {
		int root = preorder[l];
		int divide = l;
		for (int i = l + 1; i &amp;lt;= r; i++) {
			if (preorder[i] &amp;lt; root &amp;amp;&amp;amp; divide != l)
				return false;
			else if (preorder[i] &amp;gt; root &amp;amp;&amp;amp; divide != l)
				divide = i;
		}
		return helper(preorder, l + 1, divide - 1)
				&amp;amp;&amp;amp; helper(preorder, divide, r);
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think-2&#34;&gt;Think #2&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Preorder in BST has a regular pattern:

&lt;ul&gt;
&lt;li&gt;When going to left node, it must be a descending order&lt;/li&gt;
&lt;li&gt;When going to right node, it should be a ascending order&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Setting a stack, to store the previous path. Iterate throught the array:

&lt;ul&gt;
&lt;li&gt;When it getting smaller element make it just push into stack&lt;/li&gt;
&lt;li&gt;When it find the larger element (larger than the peek of stack), pop the stack and set the minimum limit as the value of popped element.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Time Complexity: $$O(n)$$, Space Complexity: $$O(n)$$&lt;/li&gt;
&lt;li&gt;For Example, 10 5 2 7 6 8 12 11 -&amp;gt; BST
&lt;code&gt;
      10
    /    \
  5       12
 / \     /
2   7   11
   / \
  6   8
&lt;/code&gt;
The procedure in Stack:
&lt;code&gt;
10 -&amp;gt; 10 5 -&amp;gt; 10 5 2 -&amp;gt; 10 7 (min=5) -&amp;gt; 10 7 6 (min = 5) -&amp;gt; 10 8 (min = 7)
-&amp;gt; 12 (min = 10) -&amp;gt; 12 11 (min = 10)
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution-2&#34;&gt;Solution #2&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public boolean verifyPreorderII(int[] preorder) {

		Stack&amp;lt;Integer&amp;gt; stack = new Stack&amp;lt;Integer&amp;gt;();
		int min = Integer.MIN_VALUE;
		for (int num : preorder) {
			if (num &amp;lt; min)
				return false;
			while (!stack.isEmpty() &amp;amp;&amp;amp; num &amp;gt; stack.peek())
				min = stack.pop();
			stack.push(num);
		}
		return true;
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think-3&#34;&gt;Think #3&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Optimized on the #2 solution&lt;/li&gt;
&lt;li&gt;Use a pointer to replace the stack peek position.&lt;/li&gt;
&lt;li&gt;指针模拟栈&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution-3&#34;&gt;Solution #3&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public boolean verifyPreorderII(int[] preorder) {

        int idx = -1;
        int min = Integer.MIN_VALUE;
        for (int num : preorder) {
            if (num &amp;lt; min)
                return false;
            while (idx &amp;gt;= 0 &amp;amp;&amp;amp; num &amp;gt; preorder[idx]) {
                min = preorder[idx--];
            }
            preorder[++idx] = num;
        }
        return true;
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Expression Tree Build</title>
      <link>http://xmxiaohuilin.github.io/2015/10/25/expression-tree-build/</link>
      <pubDate>Sun, 25 Oct 2015 15:13:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/10/25/expression-tree-build/</guid>
      <description>

&lt;p&gt;The structure of Expression Tree is a binary tree to evaluate certain expressions. All leaves of the Expression Tree have an number string value. All non-leaves of the Expression Tree have an operator string value.&lt;/p&gt;

&lt;p&gt;Now, given an expression array, build the expression tree of this expression, return the root of this expression tree.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;For the expression &lt;code&gt;(2*6-(23+7)/(1+2))&lt;/code&gt; (which can be represented by &lt;code&gt;[&amp;quot;2&amp;quot; &amp;quot;*&amp;quot; &amp;quot;6&amp;quot; &amp;quot;-&amp;quot; &amp;quot;(&amp;quot; &amp;quot;23&amp;quot; &amp;quot;+&amp;quot; &amp;quot;7&amp;quot; &amp;quot;)&amp;quot; &amp;quot;/&amp;quot; &amp;quot;(&amp;quot; &amp;quot;1&amp;quot; &amp;quot;+&amp;quot; &amp;quot;2&amp;quot; &amp;quot;)&amp;quot;]&lt;/code&gt;). The expression tree will be like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                 [ - ]
             /          \
        [ * ]              [ / ]
      /     \           /         \
    [ 2 ]  [ 6 ]      [ + ]        [ + ]
                     /    \       /      \
                   [ 23 ][ 7 ] [ 1 ]   [ 2 ] .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After building the tree, you just need to return root node &lt;code&gt;[-]&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;clarification&#34;&gt;Clarification&lt;/h3&gt;

&lt;p&gt;A binary expression tree is a specific application of a binary tree to evaluate certain expressions. Two common types of expressions that a binary expression tree can represent are algebraic[1] and boolean. These trees can represent expressions that contain both unary and binary operators.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class ExpressionTreeNode {
    public String symbol;
     public ExpressionTreeNode left, right;
     public ExpressionTreeNode(String symbol) {
        this.symbol = symbol;
        this.left = this.right = null;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Two stacks, one is only for operator, another is for build the result tree.&lt;/li&gt;
&lt;li&gt;The idea is similar with RPN.&lt;/li&gt;
&lt;li&gt;One pass the expression array, when it get a operand, insert as new treenode in result tree, when it get a operator, insert as new treenode in operator tree and compare the priority, if the current is less than stack top element, build a new node with operator in stack top and two node from result tree as its right and left child, then insert back to result tree with this new node.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;


public class Solution {
    /**
     * @param expression: A string array
     * @return: The root of expression tree
     */
    public ExpressionTreeNode build(String[] expression) {
        Stack&amp;lt;ExpressionTreeNode&amp;gt; ops = new Stack&amp;lt;&amp;gt;();
        Stack&amp;lt;ExpressionTreeNode&amp;gt; data = new Stack&amp;lt;&amp;gt;();
        for( int i = 0; i &amp;lt; expression.length; i++) {
            String str = expression[i];
            if(str.equals(&amp;quot;+&amp;quot;) || str.equals(&amp;quot;-&amp;quot;) ||str.equals(&amp;quot;*&amp;quot;) ||str.equals(&amp;quot;/&amp;quot;)) {
                while(!ops.isEmpty() &amp;amp;&amp;amp; operatorLevel(ops.peek().symbol) &amp;gt;= operatorLevel(str)) {
                    newNodeGtr(ops, data);
                }
                ops.push(new ExpressionTreeNode(str));
            }else if(str.equals(&amp;quot;(&amp;quot;)){
                ops.push(new ExpressionTreeNode(str));
            }else if(str.equals(&amp;quot;)&amp;quot;)) {
                while(!ops.isEmpty() &amp;amp;&amp;amp; !ops.peek().symbol.equals(&amp;quot;(&amp;quot;))
                    newNodeGtr(ops, data);
                if(!ops.isEmpty()) 
                    ops.pop(); // pop the &amp;quot;(&amp;quot;
            }else
                data.push(new ExpressionTreeNode(str));
        }
        
        while(!ops.isEmpty())
            newNodeGtr(ops, data);
        
        return data.isEmpty()? null : data.pop();
    }
    
    private void newNodeGtr(Stack&amp;lt;ExpressionTreeNode&amp;gt; ops, Stack&amp;lt;ExpressionTreeNode&amp;gt; data) {
        if(ops.isEmpty())
            return;
        ExpressionTreeNode node = ops.pop();
        node.right = data.isEmpty() ? null : data.pop();
        node.left = data.isEmpty() ? null : data.pop();
        data.push(node);
    }
    
    private int operatorLevel(String op) {
        if(op.equals(&amp;quot;+&amp;quot;) || op.equals(&amp;quot;-&amp;quot;)) 
            return 1;
        else if(op.equals(&amp;quot;*&amp;quot;) ||op.equals(&amp;quot;/&amp;quot;))
            return 2;
        else
            return 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Binary Search Tree Iterator</title>
      <link>http://xmxiaohuilin.github.io/2015/10/20/binary-search-tree-iterator/</link>
      <pubDate>Tue, 20 Oct 2015 16:13:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/10/20/binary-search-tree-iterator/</guid>
      <description>

&lt;p&gt;Design an iterator over a binary search tree with the following rules:&lt;/p&gt;

&lt;p&gt;Elements are visited in ascending order (i.e. an in-order traversal)
next() and hasNext() queries run in O(1) time in average.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;For the following binary search tree, in-order traversal by using iterator is [1, 6, 10, 11, 12]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   10
 /    \
1      11
 \       \
  6       12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Challenge
Extra memory usage O(h), h is the height of the tree.&lt;/p&gt;

&lt;p&gt;Super Star: Extra memory usage O(1)&lt;/p&gt;

&lt;h2 id=&#34;think-1&#34;&gt;Think #1&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Stack: Preorder&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution-1&#34;&gt;Solution #1&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    // O(height of tree) space to store current left branch nodes
    Stack&amp;lt;TreeNode&amp;gt; stack;

    //@param root: The root of binary tree.
    public Solution(TreeNode root) {

        stack = new Stack&amp;lt;&amp;gt;();
        if(root == null)
            return;
        stack.push(root);
        TreeNode left = root.left;
        while(left != null) {
            stack.push(left);
            left = left.left;
        }
    }

    //@return: True if there has next node, or false
    public boolean hasNext() {
        return !stack.isEmpty();
    }
    
    //@return: return next node
    public TreeNode next() {
        TreeNode pop = stack.pop();

        // each time pop a node, push left branch nodes for current pop node&#39;s right child
        TreeNode left = pop.right;
        while(left != null) {
            stack.push(left);
            left = left.left;
        }
        return pop;
    }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Flatten Binary Tree to Linked List</title>
      <link>http://xmxiaohuilin.github.io/2015/10/17/flatten-binary-tree-to-linked-list/</link>
      <pubDate>Sat, 17 Oct 2015 17:50:34 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/10/17/flatten-binary-tree-to-linked-list/</guid>
      <description>

&lt;p&gt;Flatten a binary tree to a fake &amp;ldquo;linked list&amp;rdquo; in pre-order traversal.&lt;/p&gt;

&lt;p&gt;Here we use the right pointer in TreeNode as the next pointer in ListNode.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;              1
               \
     1          2
    / \          \
   2   5    =&amp;gt;    3
  / \   \          \
 3   4   6          4
                     \
                      5
                       \
                        6
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;note&#34;&gt;Note&lt;/h3&gt;

&lt;p&gt;Don&amp;rsquo;t forget to mark the left child of each node to null. Or you will get Time Limit Exceeded or Memory Limit Exceeded.&lt;/p&gt;

&lt;h3 id=&#34;challenge&#34;&gt;Challenge&lt;/h3&gt;

&lt;p&gt;Do it in-place without any extra memory.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;One pass with iterate each right node.&lt;/li&gt;
&lt;li&gt;Put left node to right node.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;public class Solution {
    /**
     * @param root: a TreeNode, the root of the binary tree
     * @return: nothing
     */
    public void flatten(TreeNode root) {
        TreeNode node = root;
        while(node!=null) {
            if(node.left != null) {
                TreeNode left = node.left;
                while(left.right != null) {
                    left = left.right;
                }
                left.right = node.right;
                node.right = node.left;
                node.left = null;
            }
            node = node.right;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>