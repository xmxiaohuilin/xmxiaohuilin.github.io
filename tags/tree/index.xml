<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tree on Cindy&#39;s Blog</title>
    <link>http://xmxiaohuilin.github.io/tags/tree/</link>
    <description>Recent content in Tree on Cindy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015 Cindy Lin.</copyright>
    <lastBuildDate>Sun, 15 Nov 2015 20:33:13 -0700</lastBuildDate>
    <atom:link href="http://xmxiaohuilin.github.io/tags/tree/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Compact Tree Builder</title>
      <link>http://xmxiaohuilin.github.io/2015/11/15/compact-tree-builder/</link>
      <pubDate>Sun, 15 Nov 2015 20:33:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/15/compact-tree-builder/</guid>
      <description>

&lt;p&gt;Given a root of a binary tree. Transform it in a way that each node(except probably one) would either have N or 0 children.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   * A               A                 A                         A
     *  |               |                 |_B                       |_B
     *  |_B             |_B                  |_C                    |
     *     |            |  |                    |_D                 |_C
     *     |            |  |_D                     |_E              |
     *     |            |  |                          |_F           |_D
     *     |_C          |  |_E                           |_G        |
     *     | |_D        |    |_H                            |_H     |_E
     *     |    |_F     |                                           |
     *     |            |_C                                         |_F
     *     |_E            |                                         |
     *       |_G          |_F                                       |_G
     *       |            |                                         |
     *       |_H          |_G                                       |_H
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;BFS entire tree into a queue.&lt;/li&gt;
&lt;li&gt;Read that queue and build posssible children according to the limit and add it into the root.&lt;/li&gt;
&lt;li&gt;Record the next root in another queue.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;	private static CTree compact(TreeNode node, int limit) {

		// bfs the original tree into a queue
		List&amp;lt;TreeNode&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;();
		queue.add(node);
		int idx = 0;
		while (idx &amp;lt; queue.size()) {
			TreeNode cur = queue.get(idx++);
			if (cur.left != null)
				queue.add(cur.left);
			if (cur.right != null)
				queue.add(cur.right);
		}
		// get the root for final return
		CTree root = new CTree(queue.remove(0).val);
		// build a queue for store the new type tree
		Queue&amp;lt;CTree&amp;gt; helperQueue = new LinkedList&amp;lt;&amp;gt;();
		helperQueue.add(root);
		while (!queue.isEmpty()) {
			CTree cRoot = helperQueue.remove();
			// build the children for current CTree
			int curLv = 0; // make sure the amount of children
			List&amp;lt;CTree&amp;gt; nexlv = new ArrayList&amp;lt;&amp;gt;();
			while (curLv &amp;lt; limit &amp;amp;&amp;amp; !queue.isEmpty()) {
				nexlv.add(new CTree(queue.remove(0).val));
				helperQueue.offer(nexlv.get(curLv++));
			}			
			cRoot.nodes = nexlv;
		}	
		return root;
	}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Convert BST to Sorted Doubly-Linked List</title>
      <link>http://xmxiaohuilin.github.io/2015/11/15/convert-bst-to-sorted-doubly-linked-list/</link>
      <pubDate>Sun, 15 Nov 2015 17:10:29 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/15/convert-bst-to-sorted-doubly-linked-list/</guid>
      <description>

&lt;p&gt;Given a Binary Tree (BT), convert it to a Doubly Linked List(DLL) In-Place. The left and right pointers in nodes are to be used as previous and next pointers respectively in converted DLL. The order of nodes in DLL must be same as Inorder of the given Binary Tree. The first node of Inorder traversal (left most node in BT) must be head node of the DLL.&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Inorder traversal&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution-stack&#34;&gt;Solution #Stack&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;	private static Node convertBST2DoublyLinkedList(Node root) {
		Node dummy = new Node(0);
		Node prev = dummy;
		java.util.Stack&amp;lt;Node&amp;gt; stack = new java.util.Stack&amp;lt;&amp;gt;();

		do {
			while (root != null) {
				stack.push(root);
				root = root.prev;
			}
			Node cur = stack.pop();
			prev.next = cur;
			cur.prev = prev;
			prev = prev.next;
			if (cur.next != null)
				root = cur.next;
			else
				root = null;
		} while (!stack.isEmpty() || root != null);

		return dummy.next;
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-recursion&#34;&gt;Solution #Recursion&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
    static Node dummy = new Node(0);
    static Node pre = dummy;

    private static Node convertII(Node root) {
        if (root == null)
            return root;
        Node prev = convertII(root.prev);
        pre.next = root;
        root.prev = pre;
        pre = root;
        Node next = convertII(root.next);
        return root;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reverse a Stack using Recursion</title>
      <link>http://xmxiaohuilin.github.io/2015/11/13/reverse-a-stack-using-recursion/</link>
      <pubDate>Fri, 13 Nov 2015 20:39:16 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/13/reverse-a-stack-using-recursion/</guid>
      <description>

&lt;p&gt;Reverse a stack using recursion.&lt;/p&gt;

&lt;p&gt;You are not allowed to use loop constructs like while, for..etc, and you can only use the following ADT functions on Stack S:
- &lt;code&gt;isEmpty(S)&lt;/code&gt;
- &lt;code&gt;push(S)&lt;/code&gt;
- &lt;code&gt;pop(S)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Very very trick problem&lt;/li&gt;
&lt;li&gt;The idea of the solution is to hold all values in Function Call Stack until the stack becomes empty. When the stack becomes empty, insert all held items one by one at the bottom of the stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void recrusion(Stack&amp;lt;Integer&amp;gt; stack) {
        if (stack.isEmpty())
            return;
        int tmp = stack.pop();
        recrusion(stack);
        helper(stack, tmp);
    }

    private static void helper(Stack&amp;lt;Integer&amp;gt; stack, int val) {
        if (stack.isEmpty())
            stack.push(val);
        else {
            int tmp = stack.pop();
            helper(stack, val);
            stack.push(tmp);
        }
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Level Order with Position Preserved</title>
      <link>http://xmxiaohuilin.github.io/2015/11/13/level-order-with-position-preserved/</link>
      <pubDate>Fri, 13 Nov 2015 17:50:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/13/level-order-with-position-preserved/</guid>
      <description>

&lt;p&gt;Given a Tree, each node contains one digit value, print each level in a format with relative position preserved.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;       eg.           1
                   /   \
                 2      4
                  \       \
                  3        7
    output:
                   1
               2      4
                 3      7
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tricky part is we should know the depth firstly. So that we can know how many space should be reserved in final line. Since the each line should preserved as most the length with the node&amp;rsquo;s amount in full tree of that depth.&lt;/li&gt;
&lt;li&gt;The length of each line should be the $2^{depth} - 1$&lt;/li&gt;
&lt;li&gt;Recursively to set the node value in the middle of left and right range.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class TreeLevelOrder {
	public List&amp;lt;String&amp;gt; printLevelwithSpacePreserved(TreeNode root) {
		List&amp;lt;String&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();
		int depth = getDepth(root);
		int len = (int) Math.pow(2, depth) - 1;
		List&amp;lt;List&amp;lt;Character&amp;gt;&amp;gt; space = new ArrayList&amp;lt;&amp;gt;();
		for (int i = 0; i &amp;lt; depth; i++) {
			List&amp;lt;Character&amp;gt; line = new ArrayList&amp;lt;&amp;gt;();
			for(int j = 0; j &amp;lt; len; j++)
				line.add(&#39; &#39;);
			space.add(line);
		}
		levelOrderRecrusion(space, root, 0, len - 1, 0);
		for (List&amp;lt;Character&amp;gt; cs : space) {
			StringBuilder sb = new StringBuilder();
			for (char c : cs)
				sb.append(c);
			res.add(sb.toString());
		}
		return res;
	}

	private void levelOrderRecrusion(List&amp;lt;List&amp;lt;Character&amp;gt;&amp;gt; res, TreeNode node,
			int l, int r, int lv) {
		if (node == null)
			return;
		List&amp;lt;Character&amp;gt; line = res.get(lv);
		int m = l + ((r - l) &amp;gt;&amp;gt; 1);
		line.set(m, (char) (node.val + &#39;0&#39;));
		levelOrderRecrusion(res, node.left, l, m - 1, lv + 1);
		levelOrderRecrusion(res, node.right, m + 1, r, lv + 1);
	}

	private int getDepth(TreeNode node) {
		if (node == null)
			return 0;
		return 1 + Math.max(getDepth(node.left), getDepth(node.right));
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>The Second Minimum in Tournament Tree</title>
      <link>http://xmxiaohuilin.github.io/2015/11/13/the-second-minimum-in-tournament-tree/</link>
      <pubDate>Fri, 13 Nov 2015 17:50:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/13/the-second-minimum-in-tournament-tree/</guid>
      <description>

&lt;p&gt;Given a tournament tree try to find the second minimum value. Here the tournament tree is represented by a tree with node has the minimum value of children.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;By given the following tree, it should return &lt;code&gt;5&lt;/code&gt; as the second minimum value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                2
              /   \
            2      7
          /  \     |  \
         5    2    8   7
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This a full tree and each root is the min value of two children&lt;/li&gt;
&lt;li&gt;Each time we only concern the subtree root has the value equal to the root and record another child&amp;rsquo;s value as the candidate of second minimum.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class TournamentTree {
    static int secMin = Integer.MAX_VALUE;

    // the given tree is a minimum value tree
    public static int getSecMin(TreeNode root) {
        if (root == null)
            throw new IllegalArgumentException(&amp;quot;Illeagal Input!&amp;quot;);
        
        if (root.left == null &amp;amp;&amp;amp; root.right == null)
            return secMin;
        
        if (root.left.val == root.val) {
            secMin = Math.min(secMin, root.right.val);
            return getSecMin(root.left);
        } else {
            secMin = Math.min(secMin, root.left.val);
            return getSecMin(root.right);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Count Univalue Subtrees</title>
      <link>http://xmxiaohuilin.github.io/2015/11/09/count-univalue-subtrees/</link>
      <pubDate>Mon, 09 Nov 2015 13:10:29 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/09/count-univalue-subtrees/</guid>
      <description>

&lt;p&gt;Given a binary tree, count the number of uni-value subtrees.&lt;/p&gt;

&lt;p&gt;A Uni-value subtree means all nodes of the subtree have the same value.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example:&lt;/h3&gt;

&lt;p&gt;Given binary tree,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    5
   / \
  1   5
 / \   \
5   5   5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;return &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Typical Tree problem with recursion idea&lt;/li&gt;
&lt;li&gt;Four cases in recursion:

&lt;ul&gt;
&lt;li&gt;Leaf node: if true case and increase the counter&lt;/li&gt;
&lt;li&gt;Node with on one child:

&lt;ul&gt;
&lt;li&gt;Left Only: check return value from left child and value of left child should be the same as current node.&lt;/li&gt;
&lt;li&gt;Right Only: check return value from right child and value of right child should be the same as current node.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Node with two children: check return value from both side and both child node value should be the same as current node.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class CountUnivalueSubtrees {

    public int countUnivalSubtrees(TreeNode root) {
        if (root == null)
            return 0;
        int[] cnt = new int[1];
        helper(root, cnt);
        return cnt[0];
    }

    private boolean helper(TreeNode node, int[] cnt) {
        if (node.left == null &amp;amp;&amp;amp; node.right == null) {
            cnt[0]++;
            return true;
        } else if (node.left == null) {
            if (helper(node.right, cnt) &amp;amp;&amp;amp; node.right.val == node.val) {
                cnt[0]++;
                return true;
            } else
                return false;
        } else if (node.right == null) {
            if (helper(node.left, cnt) &amp;amp;&amp;amp; node.left.val == node.val) {
                cnt[0]++;
                return true;
            } else
                return false;
        } else {
            if (helper(node.left, cnt) &amp;amp;&amp;amp; helper(node.right, cnt)
                    &amp;amp;&amp;amp; node.left.val == node.val &amp;amp;&amp;amp; node.right.val == node.val) {
                cnt[0]++;
                return true;
            } else
                return false;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Search Range in Binary Search Tree</title>
      <link>http://xmxiaohuilin.github.io/2015/10/27/search-range-in-binary-search-tree/</link>
      <pubDate>Tue, 27 Oct 2015 13:10:29 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/10/27/search-range-in-binary-search-tree/</guid>
      <description>

&lt;p&gt;Given two values k1 and k2 (where k1 &amp;lt; k2) and a root pointer to a Binary Search Tree. Find all the keys of tree in range k1 to k2. i.e. print all x such that k1&amp;lt;=x&amp;lt;=k2 and x is a key of given BST. Return all the keys in ascending order.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;If k1 = 10 and k2 = 22, then your function should return [12, 20, 22].&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    20
   /  \
  8   22
 / \
4   12
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Recursion on each valid node.&lt;/li&gt;
&lt;li&gt;For invalid node, if it is less than k1, check its right child, while if it is larger than k2, check its left child&lt;/li&gt;
&lt;li&gt;Add the result from left and itself and right&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    /**
     * @param root: The root of the binary search tree.
     * @param k1 and k2: range k1 to k2.
     * @return: Return all keys that k1&amp;lt;=key&amp;lt;=k2 in ascending order.
     */
    public ArrayList&amp;lt;Integer&amp;gt; searchRange(TreeNode root, int k1, int k2) {
        ArrayList&amp;lt;Integer&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();
        if(root == null)
            return res;
        ArrayList&amp;lt;Integer&amp;gt; left = searchRange(root.left, k1, k2);
        ArrayList&amp;lt;Integer&amp;gt; right = searchRange(root.right, k1, k2);
        // current value is less than k1, check its right child
        if(root.val &amp;lt; k1)
            return right;
        // current value is larger than k2, check its left child
        if(root.val &amp;gt; k2)
            return left;
        // add left branch first then itself and then right branch
        res.addAll(left);
        res.add(root.val);
        res.addAll(right);
        return res;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Balanced Binary Tree</title>
      <link>http://xmxiaohuilin.github.io/2015/10/18/balanced-binary-tree/</link>
      <pubDate>Sun, 18 Oct 2015 23:10:29 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/10/18/balanced-binary-tree/</guid>
      <description>

&lt;p&gt;Given a binary tree, determine if it is height-balanced.&lt;/p&gt;

&lt;p&gt;For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Given binary tree A={3,9,20,#,#,15,7}, B={3,#,20,15,7}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A)  3            B)    3 
   / \                  \
  9  20                 20
    /  \                / \
   15   7              15  7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The binary tree A is a height-balanced binary tree, but B is not.&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get two max depths from left branch and right branch&lt;/li&gt;
&lt;li&gt;Recursive from bottom to top and Compare two max depth on each node&lt;/li&gt;
&lt;li&gt;If the difference between two depth is larger than one, regard it as non-balanced tree.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: True if this Binary tree is Balanced, or false.
     */
    public boolean isBalanced(TreeNode root) {
        if(root == null)
            return true;
        // write your code here
        int left =  height(root.left);
        int right = height(root.right);
        if(Math.abs(left - right) &amp;lt;= 1)
            return isBalanced(root.left) &amp;amp;&amp;amp; isBalanced(root.right);
        return false;
    }
    
    private int height(TreeNode node) {
        if(node == null)
            return 0;
        return Math.max(height(node.left), height(node.right)) + 1;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Depth of Tree Problems</title>
      <link>http://xmxiaohuilin.github.io/2015/10/18/depth-of-tree-problems/</link>
      <pubDate>Sun, 18 Oct 2015 23:10:29 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/10/18/depth-of-tree-problems/</guid>
      <description>

&lt;p&gt;Depth of Tree problem&lt;/p&gt;

&lt;h2 id=&#34;1-maximum-depth-of-binary-tree&#34;&gt;1. Maximum Depth of Binary Tree&lt;/h2&gt;

&lt;p&gt;Given a binary tree, find its maximum depth.&lt;/p&gt;

&lt;p&gt;The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.&lt;/p&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;Given a binary tree as follow:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  1
 / \ 
2   3
   / \
  4   5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The maximum depth is 3.&lt;/p&gt;

&lt;h3 id=&#34;think&#34;&gt;Think&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Recursively check the depth&lt;/li&gt;
&lt;li&gt;Only if the node is a leaf node we stop recursion and return 0&lt;/li&gt;
&lt;li&gt;We compare the recursion results from left branch and right branch to get the maximum value.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: An integer.
     */
    public int maxDepth(TreeNode root) {
        if(root == null)
            return 0;
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        return Math.max(left, right) + 1;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-minimum-depth-of-tree&#34;&gt;2. Minimum Depth of Tree&lt;/h2&gt;

&lt;p&gt;Given a binary tree, find its minimum depth.&lt;/p&gt;

&lt;p&gt;The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.&lt;/p&gt;

&lt;h4 id=&#34;example-1&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;Given a binary tree as follow:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        1

     /     \ 

   2       3

          /    \

        4      5  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The minimum depth is 2&lt;/p&gt;

&lt;h3 id=&#34;think-1&#34;&gt;Think&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Recursively check the depth&lt;/li&gt;
&lt;li&gt;Only if the node is a leaf node we stop recursion and return 0&lt;/li&gt;
&lt;li&gt;If a node just have one child, we should not compare the recursion result!&lt;/li&gt;
&lt;li&gt;If a node contains both left and right child, we compare the recursion results to get the minimum value.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;solution-1&#34;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: An integer.
     */
    public int minDepth(TreeNode root) {
        // write your code here
        if(root == null)
            return 0;
        
        if(root.left == null)
            return minDepth(root.right) + 1;
        else if(root.right == null)    
            return minDepth(root.left) + 1;
        else
            return Math.min(minDepth(root.left), minDepth(root.right)) + 1;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Lowest Common Ancestor</title>
      <link>http://xmxiaohuilin.github.io/2015/10/18/lowest-common-ancestor/</link>
      <pubDate>Sun, 18 Oct 2015 23:10:29 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/10/18/lowest-common-ancestor/</guid>
      <description>

&lt;p&gt;Given the root and two nodes in a Binary Tree. Find the lowest common ancestor(LCA) of the two nodes.&lt;/p&gt;

&lt;p&gt;The lowest common ancestor is the node with largest depth which is the ancestor of both nodes.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;For the following binary tree:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  4
 / \
3   7
   / \
  5   6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LCA(3, 5) = 4&lt;/p&gt;

&lt;p&gt;LCA(5, 6) = 7&lt;/p&gt;

&lt;p&gt;LCA(6, 7) = 7&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Recursively traversal on every tree node&lt;/li&gt;
&lt;li&gt;Once it touched &lt;code&gt;null&lt;/code&gt; or target A node or target B node, it return it self&lt;/li&gt;
&lt;li&gt;Divide and conquer to get return from left branch and right branch&lt;/li&gt;
&lt;li&gt;Check if both return result are not null, means current node is the common ancestor&lt;/li&gt;
&lt;li&gt;If it is not, return the not null one or return null if both are null&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    /**
     * @param root: The root of the binary search tree.
     * @param A and B: two nodes in a Binary.
     * @return: Return the least common ancestor(LCA) of the two nodes.
     */
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode A, TreeNode B) {
        if(root == null || root == A || root == B)
            return root;
        TreeNode left = lowestCommonAncestor(root.left, A, B);
        TreeNode right = lowestCommonAncestor(root.right, A, B);
        if(left != null &amp;amp;&amp;amp; right != null) {
            return root;
        }else{
            return left == null? right : left;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think-with-parent-node&#34;&gt;Think # With Parent Node&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;With Parent node we don&amp;rsquo;t need the root node.&lt;/li&gt;
&lt;li&gt;Get the depth of each node.&lt;/li&gt;
&lt;li&gt;Then look like we find the intersectin of two linked list.&lt;/li&gt;
&lt;li&gt;Find the intersection.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution-with-parent-node&#34;&gt;Solution # With Parent Node&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    /**
     * @param A and B: two nodes in a Binary.
     * @return: Return the least common ancestor(LCA) of the two nodes.
     */
    public TreeNode lowestCommonAncestor(TreeNode A, TreeNode B) {
        int adepth = getDepth(A);
        int bdepth = getDepth(B);
        // make two length equal
        while(adepth &amp;gt; bdepth) {
            A = A.parent;
            adepth--;
        }
        while(adepth &amp;lt; bdepth) {
            B = B.parent;
            bdepth--;
        }
        // find intersection
        while(A != B) {
            if(A == B)
                return A;
            A = A.parent;
            B = B.parent;
        }
        return null;
    }

    private int getDepth(TreeNode node){
        if(node == null)
            return 0;
        return 1 + getDepth(node.parent);
    }
}
class TreeNode{
    int val;
    TreeNode parent, left, right;
    public TreeNode(int val){
        this.val = val;
}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>