<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Comparable on Cindy&#39;s Blog</title>
    <link>http://xmxiaohuilin.github.io/tags/comparable/</link>
    <description>Recent content in Comparable on Cindy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015 Cindy Lin.</copyright>
    <lastBuildDate>Fri, 13 Nov 2015 23:50:13 -0700</lastBuildDate>
    <atom:link href="http://xmxiaohuilin.github.io/tags/comparable/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>K Nearest Points</title>
      <link>http://xmxiaohuilin.github.io/2015/11/13/k-nearest-points/</link>
      <pubDate>Fri, 13 Nov 2015 23:50:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/13/k-nearest-points/</guid>
      <description>

&lt;p&gt;Find K nearest Points by given the central point. Complete the class design for Point as implementing Comparable interface.&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Implement a Point class with Comparable interface, we can save the distance between the central point in each point and for its &lt;code&gt;compareTo&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Max heap to save space, since we only need k space for max heap. The top of heap is the node has the larest distance in these k nearest node. So once we got point near to the central than it, we poll the top and add the new one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class KnearestPoints {
    private static class CPoint {
        public double x;
        public double y;
        public CPoint(double x, double y) {
            this.x = x;
            this.y = y;
        }
    }
    // finding k nearest neighbor from the original point using a MAX heap
    public static CPoint[] closestk(CPoint[] mylist, int k) {
        CPoint[] res = new CPoint[k];
        // edge cases
        if (mylist == null || mylist.length == 0 || mylist.length &amp;lt; k) {
            return mylist;
        }
        
        // setup the max heap using priority queue 
        PriorityQueue&amp;lt;CPoint&amp;gt; heap = new PriorityQueue&amp;lt;&amp;gt;(k, new Comparator&amp;lt;CPoint&amp;gt;(){
            @Override
            public int compare(CPoint o1, CPoint o2) {
                double dist1 = Math.hypot(o1.x, o1.y);
                double dist2 = Math.hypot(o2.x, o2.y);
                // order by decreasing from larger one to less one
                return Double.compare(dist2, dist1);
            }
        });
        
        int count = 0;
        // each time if the dist of new point is less than the MAX in the heap, 
        // we poll the max point from heap and put this new point into the heap.
        for (CPoint point: mylist) {
            if (count &amp;lt; k) {
                heap.offer(point);
                count++;
            } else {
                CPoint peek = heap.peek();
                if (Math.hypot(point.x, point.y) &amp;lt; Math.hypot(peek.x, peek.y)) {
                    heap.poll();
                    heap.offer(point);
                }
            }
        }
        
        for (int i = k - 1; i &amp;gt;= 0; i--) {
            res[i] = heap.poll(); 
        }
        return res;
    }
    
    public static void main(String[] args) {
        CPoint[] list = new CPoint[6];
        list[0] = new CPoint(1,2);
        list[1] = new CPoint(3,2);
        list[2] = new CPoint(2,2);
        list[3] = new CPoint(1,0);
        list[4] = new CPoint(-0.5, -0.5);
        list[5] = new CPoint(-1, -1);
        
        CPoint[] res = closestk(list, 3);
        
        for(CPoint p : res)
          System.out.println(p.x + &amp;quot;   &amp;quot; + p.y);
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>