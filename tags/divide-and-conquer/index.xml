<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Divide And Conquer on Cindy&#39;s Blog</title>
    <link>http://xmxiaohuilin.github.io/tags/divide-and-conquer/</link>
    <description>Recent content in Divide And Conquer on Cindy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015 Cindy Lin.</copyright>
    <lastBuildDate>Mon, 09 Nov 2015 13:10:29 -0700</lastBuildDate>
    <atom:link href="http://xmxiaohuilin.github.io/tags/divide-and-conquer/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Count Univalue Subtrees</title>
      <link>http://xmxiaohuilin.github.io/2015/11/09/count-univalue-subtrees/</link>
      <pubDate>Mon, 09 Nov 2015 13:10:29 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/11/09/count-univalue-subtrees/</guid>
      <description>

&lt;p&gt;Given a binary tree, count the number of uni-value subtrees.&lt;/p&gt;

&lt;p&gt;A Uni-value subtree means all nodes of the subtree have the same value.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example:&lt;/h3&gt;

&lt;p&gt;Given binary tree,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    5
   / \
  1   5
 / \   \
5   5   5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;return &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Typical Tree problem with recursion idea&lt;/li&gt;
&lt;li&gt;Four cases in recursion:

&lt;ul&gt;
&lt;li&gt;Leaf node: if true case and increase the counter&lt;/li&gt;
&lt;li&gt;Node with on one child:

&lt;ul&gt;
&lt;li&gt;Left Only: check return value from left child and value of left child should be the same as current node.&lt;/li&gt;
&lt;li&gt;Right Only: check return value from right child and value of right child should be the same as current node.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Node with two children: check return value from both side and both child node value should be the same as current node.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class CountUnivalueSubtrees {

    public int countUnivalSubtrees(TreeNode root) {
        if (root == null)
            return 0;
        int[] cnt = new int[1];
        helper(root, cnt);
        return cnt[0];
    }

    private boolean helper(TreeNode node, int[] cnt) {
        if (node.left == null &amp;amp;&amp;amp; node.right == null) {
            cnt[0]++;
            return true;
        } else if (node.left == null) {
            if (helper(node.right, cnt) &amp;amp;&amp;amp; node.right.val == node.val) {
                cnt[0]++;
                return true;
            } else
                return false;
        } else if (node.right == null) {
            if (helper(node.left, cnt) &amp;amp;&amp;amp; node.left.val == node.val) {
                cnt[0]++;
                return true;
            } else
                return false;
        } else {
            if (helper(node.left, cnt) &amp;amp;&amp;amp; helper(node.right, cnt)
                    &amp;amp;&amp;amp; node.left.val == node.val &amp;amp;&amp;amp; node.right.val == node.val) {
                cnt[0]++;
                return true;
            } else
                return false;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Search Range in Binary Search Tree</title>
      <link>http://xmxiaohuilin.github.io/2015/10/27/search-range-in-binary-search-tree/</link>
      <pubDate>Tue, 27 Oct 2015 13:10:29 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/10/27/search-range-in-binary-search-tree/</guid>
      <description>

&lt;p&gt;Given two values k1 and k2 (where k1 &amp;lt; k2) and a root pointer to a Binary Search Tree. Find all the keys of tree in range k1 to k2. i.e. print all x such that k1&amp;lt;=x&amp;lt;=k2 and x is a key of given BST. Return all the keys in ascending order.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;If k1 = 10 and k2 = 22, then your function should return [12, 20, 22].&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    20
   /  \
  8   22
 / \
4   12
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Recursion on each valid node.&lt;/li&gt;
&lt;li&gt;For invalid node, if it is less than k1, check its right child, while if it is larger than k2, check its left child&lt;/li&gt;
&lt;li&gt;Add the result from left and itself and right&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    /**
     * @param root: The root of the binary search tree.
     * @param k1 and k2: range k1 to k2.
     * @return: Return all keys that k1&amp;lt;=key&amp;lt;=k2 in ascending order.
     */
    public ArrayList&amp;lt;Integer&amp;gt; searchRange(TreeNode root, int k1, int k2) {
        ArrayList&amp;lt;Integer&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();
        if(root == null)
            return res;
        ArrayList&amp;lt;Integer&amp;gt; left = searchRange(root.left, k1, k2);
        ArrayList&amp;lt;Integer&amp;gt; right = searchRange(root.right, k1, k2);
        // current value is less than k1, check its right child
        if(root.val &amp;lt; k1)
            return right;
        // current value is larger than k2, check its left child
        if(root.val &amp;gt; k2)
            return left;
        // add left branch first then itself and then right branch
        res.addAll(left);
        res.add(root.val);
        res.addAll(right);
        return res;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Convert Sorted List to Binary Search Tree</title>
      <link>http://xmxiaohuilin.github.io/2015/10/25/convert-sorted-list-to-binary-search-tree/</link>
      <pubDate>Sun, 25 Oct 2015 20:33:13 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/10/25/convert-sorted-list-to-binary-search-tree/</guid>
      <description>

&lt;p&gt;Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;               2
1-&amp;gt;2-&amp;gt;3  =&amp;gt;   / \
             1   3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Find the middle point in list&lt;/li&gt;
&lt;li&gt;Divide and Conquer to build left child and right child node&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    /**
     * @param head: The first node of linked list.
     * @return: a tree node
     */
    public TreeNode sortedListToBST(ListNode head) {  
        // write your code here
        if(head == null)
            return null;
        if(head.next == null)
            return new TreeNode(head.val);
            
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode runner = head;
        ListNode walker = dummy;
        while(runner!=null &amp;amp;&amp;amp; runner.next!=null) {
            runner = runner.next.next;
            walker = walker.next;
        }
        
        ListNode m = walker.next;
        TreeNode root = new TreeNode(m.val);
        ListNode left = dummy.next;
        ListNode right = walker.next.next;
        walker.next = null;
        root.left = sortedListToBST(left);
        root.right = sortedListToBST(right);
        return root;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Balanced Binary Tree</title>
      <link>http://xmxiaohuilin.github.io/2015/10/18/balanced-binary-tree/</link>
      <pubDate>Sun, 18 Oct 2015 23:10:29 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/10/18/balanced-binary-tree/</guid>
      <description>

&lt;p&gt;Given a binary tree, determine if it is height-balanced.&lt;/p&gt;

&lt;p&gt;For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Given binary tree A={3,9,20,#,#,15,7}, B={3,#,20,15,7}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A)  3            B)    3 
   / \                  \
  9  20                 20
    /  \                / \
   15   7              15  7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The binary tree A is a height-balanced binary tree, but B is not.&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get two max depths from left branch and right branch&lt;/li&gt;
&lt;li&gt;Recursive from bottom to top and Compare two max depth on each node&lt;/li&gt;
&lt;li&gt;If the difference between two depth is larger than one, regard it as non-balanced tree.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: True if this Binary tree is Balanced, or false.
     */
    public boolean isBalanced(TreeNode root) {
        if(root == null)
            return true;
        // write your code here
        int left =  height(root.left);
        int right = height(root.right);
        if(Math.abs(left - right) &amp;lt;= 1)
            return isBalanced(root.left) &amp;amp;&amp;amp; isBalanced(root.right);
        return false;
    }
    
    private int height(TreeNode node) {
        if(node == null)
            return 0;
        return Math.max(height(node.left), height(node.right)) + 1;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Depth of Tree Problems</title>
      <link>http://xmxiaohuilin.github.io/2015/10/18/depth-of-tree-problems/</link>
      <pubDate>Sun, 18 Oct 2015 23:10:29 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/10/18/depth-of-tree-problems/</guid>
      <description>

&lt;p&gt;Depth of Tree problem&lt;/p&gt;

&lt;h2 id=&#34;1-maximum-depth-of-binary-tree&#34;&gt;1. Maximum Depth of Binary Tree&lt;/h2&gt;

&lt;p&gt;Given a binary tree, find its maximum depth.&lt;/p&gt;

&lt;p&gt;The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.&lt;/p&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;Given a binary tree as follow:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  1
 / \ 
2   3
   / \
  4   5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The maximum depth is 3.&lt;/p&gt;

&lt;h3 id=&#34;think&#34;&gt;Think&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Recursively check the depth&lt;/li&gt;
&lt;li&gt;Only if the node is a leaf node we stop recursion and return 0&lt;/li&gt;
&lt;li&gt;We compare the recursion results from left branch and right branch to get the maximum value.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: An integer.
     */
    public int maxDepth(TreeNode root) {
        if(root == null)
            return 0;
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        return Math.max(left, right) + 1;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-minimum-depth-of-tree&#34;&gt;2. Minimum Depth of Tree&lt;/h2&gt;

&lt;p&gt;Given a binary tree, find its minimum depth.&lt;/p&gt;

&lt;p&gt;The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.&lt;/p&gt;

&lt;h4 id=&#34;example-1&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;Given a binary tree as follow:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        1

     /     \ 

   2       3

          /    \

        4      5  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The minimum depth is 2&lt;/p&gt;

&lt;h3 id=&#34;think-1&#34;&gt;Think&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Recursively check the depth&lt;/li&gt;
&lt;li&gt;Only if the node is a leaf node we stop recursion and return 0&lt;/li&gt;
&lt;li&gt;If a node just have one child, we should not compare the recursion result!&lt;/li&gt;
&lt;li&gt;If a node contains both left and right child, we compare the recursion results to get the minimum value.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;solution-1&#34;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: An integer.
     */
    public int minDepth(TreeNode root) {
        // write your code here
        if(root == null)
            return 0;
        
        if(root.left == null)
            return minDepth(root.right) + 1;
        else if(root.right == null)    
            return minDepth(root.left) + 1;
        else
            return Math.min(minDepth(root.left), minDepth(root.right)) + 1;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Lowest Common Ancestor</title>
      <link>http://xmxiaohuilin.github.io/2015/10/18/lowest-common-ancestor/</link>
      <pubDate>Sun, 18 Oct 2015 23:10:29 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/10/18/lowest-common-ancestor/</guid>
      <description>

&lt;p&gt;Given the root and two nodes in a Binary Tree. Find the lowest common ancestor(LCA) of the two nodes.&lt;/p&gt;

&lt;p&gt;The lowest common ancestor is the node with largest depth which is the ancestor of both nodes.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;For the following binary tree:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  4
 / \
3   7
   / \
  5   6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LCA(3, 5) = 4&lt;/p&gt;

&lt;p&gt;LCA(5, 6) = 7&lt;/p&gt;

&lt;p&gt;LCA(6, 7) = 7&lt;/p&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Recursively traversal on every tree node&lt;/li&gt;
&lt;li&gt;Once it touched &lt;code&gt;null&lt;/code&gt; or target A node or target B node, it return it self&lt;/li&gt;
&lt;li&gt;Divide and conquer to get return from left branch and right branch&lt;/li&gt;
&lt;li&gt;Check if both return result are not null, means current node is the common ancestor&lt;/li&gt;
&lt;li&gt;If it is not, return the not null one or return null if both are null&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    /**
     * @param root: The root of the binary search tree.
     * @param A and B: two nodes in a Binary.
     * @return: Return the least common ancestor(LCA) of the two nodes.
     */
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode A, TreeNode B) {
        if(root == null || root == A || root == B)
            return root;
        TreeNode left = lowestCommonAncestor(root.left, A, B);
        TreeNode right = lowestCommonAncestor(root.right, A, B);
        if(left != null &amp;amp;&amp;amp; right != null) {
            return root;
        }else{
            return left == null? right : left;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think-with-parent-node&#34;&gt;Think # With Parent Node&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;With Parent node we don&amp;rsquo;t need the root node.&lt;/li&gt;
&lt;li&gt;Get the depth of each node.&lt;/li&gt;
&lt;li&gt;Then look like we find the intersectin of two linked list.&lt;/li&gt;
&lt;li&gt;Find the intersection.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution-with-parent-node&#34;&gt;Solution # With Parent Node&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    /**
     * @param A and B: two nodes in a Binary.
     * @return: Return the least common ancestor(LCA) of the two nodes.
     */
    public TreeNode lowestCommonAncestor(TreeNode A, TreeNode B) {
        int adepth = getDepth(A);
        int bdepth = getDepth(B);
        // make two length equal
        while(adepth &amp;gt; bdepth) {
            A = A.parent;
            adepth--;
        }
        while(adepth &amp;lt; bdepth) {
            B = B.parent;
            bdepth--;
        }
        // find intersection
        while(A != B) {
            if(A == B)
                return A;
            A = A.parent;
            B = B.parent;
        }
        return null;
    }

    private int getDepth(TreeNode node){
        if(node == null)
            return 0;
        return 1 + getDepth(node.parent);
    }
}
class TreeNode{
    int val;
    TreeNode parent, left, right;
    public TreeNode(int val){
        this.val = val;
}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>