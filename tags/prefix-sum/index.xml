<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prefix Sum on Cindy&#39;s Blog</title>
    <link>http://xmxiaohuilin.github.io/tags/prefix-sum/</link>
    <description>Recent content in Prefix Sum on Cindy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015 Cindy Lin.</copyright>
    <lastBuildDate>Wed, 09 Sep 2015 10:40:49 -0700</lastBuildDate>
    <atom:link href="http://xmxiaohuilin.github.io/tags/prefix-sum/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Subarray Sum I</title>
      <link>http://xmxiaohuilin.github.io/2015/09/09/subarray-sum-i/</link>
      <pubDate>Wed, 09 Sep 2015 10:40:49 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/09/09/subarray-sum-i/</guid>
      <description>&lt;p&gt;Given an integer array, find a subarray where the sum of numbers is zero. Your code should return the index of the first number and the index of the last number.&lt;/p&gt;

&lt;pre&gt;
    &lt;code class=&#34;java&#34;&gt;
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number 
     *          and the index of the last number
     */
    public ArrayList&lt;Integer&gt; subarraySum(int[] nums) {
        // write your code here
        ArrayList&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();
        if(nums == null || nums.length == 0)
            return res;       
        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;Integer&gt;();
        int sum = 0;
        map.put(0, 0);
        for(int i = 0; i &lt; nums.length; i++) {
            if(map.containsKey(sum+nums[i])) {
                res.add(map.get(sum+nums[i]));
                res.add(i);
                return res;
            }
            map.put(sum+=nums[i], i+1);
        }
        return res;
    }
}   

&lt;/code&gt;

&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Subarray Sum II</title>
      <link>http://xmxiaohuilin.github.io/2015/09/08/subarray-sum-ii/</link>
      <pubDate>Tue, 08 Sep 2015 21:18:09 -0700</pubDate>
      
      <guid>http://xmxiaohuilin.github.io/2015/09/08/subarray-sum-ii/</guid>
      <description>&lt;p&gt;Given an integer array, find a subarray where the sum of numbers is between two given interval. Your code should return the number of possible answer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
public int subarraySumII(int[] A, int start, int end) {
    int res = 0;
        for(int i = 1; i &lt; A.length; i++)
            A[i] += A[i - 1];
        
        Arrays.sort(A);
        for(int i = 0; i &lt; A.length; i++) {
            if(A[i] &gt;= start &amp;&amp; A[i] &lt;= end)
                res++;
            // start &lt;= A[i] - A[j] &lt;= end
            // so the max bound and min bound of A[j] are following:
            int max = A[i] - start;
            int min = A[i] - end;
            // max + 1 make sure the right bound of max value and also index problem
            int range = findInsPos(A, max + 1) - findInsPos(A, min);
            res += range;
        }
        return res;
}
private int findInsPos(int[] A, int value) {
        int l = 0, r = A.length - 1;
        
        while(l &lt; r - 1) {
            int m = l + ((r - l) &gt;&gt;1);
            if(A[m] &lt; value)
                l = m;
            else
                r = m;
        }
        if(A[l] &gt;= value)
            return l;
        else
            return r;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>